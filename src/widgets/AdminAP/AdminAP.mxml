<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"				   
				   xmlns:components="com.esri.viewer.components.*"
				   xmlns:esri="http://www.esri.com/2008/ags"  
				   initialize="basewidget1_initializeHandler(event)">	
	
	<viewer:states>
		<s:State name="bkmInit"/>
		<s:State name="bkmConsulta"/>
		<s:State name="bkmConsultaMeses"/>
		<s:State name ="bkmConsultaDetalle" />
		
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[bkmInit,bkmConsulta,bkmConsultaMeses,bkmConsultaDetalle]}"/>
		</s:Transition>
	</viewer:transitions>
	
	<fx:Declarations>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
		
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="dd/MM/yyyy"/>
		
		
		
		<mx:WipeUp id="myWU" duration="300"/>
		<mx:WipeDown id="myWD" duration="500"/>
		<mx:WipeRight id="myWR" duration="850"/>
		<esri:GraphicsLayer id="graphicsLayer" />
		
		<esri:SimpleMarkerSymbol id="smsIdentify"
								 alpha="0.5"
								 color="0x00FFFF"
								 size="20"
								 style="circle"/>
		
		<esri:SimpleLineSymbol id="slsFind"
							   width="35"
							   alpha="0.9"
							   color="0x00FF00"
							   style="solid"/>
		
		<esri:SimpleLineSymbol id="slsFindMedidor"
							   width="15"
							   alpha="0.9"
							   color="0xFF9900"
							   style="dot"/>
		
		<esri:SimpleLineSymbol id="slsFindMedidorxTramo"
							   width="5"
							   alpha="0.9"
							   color="0xFF0033"
							   style="solid"/>
		<esri:SimpleLineSymbol id="slsMedidorFound"
							   width="20"
							   alpha="1"
							   color="0x0066FF"
							   style="dashdotdot"/>
		
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import mx.events.ListEvent;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.AsyncResponder;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			
			import comun.Planificacion.User;
			import comun.url.URL;
			
			import widgets.AdminAP.utilidad.urls;
		
			
			private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
			
			[Bindable] public var idPosteNuevo:String;
			[Bindable] public var idDirNueva:String;
			[Bindable] public var rotNuevo:String;
			[Bindable] public var dirNueva:String;
			[Bindable] public var coleccionClientes:ArrayCollection = new ArrayCollection;
			[Bindable] public var coleccionBusqueda:ArrayCollection = new ArrayCollection;
			[Bindable] public var coleccionTeorica:ArrayCollection = new ArrayCollection;
			[Bindable] public var coleccionMeses:ArrayCollection = new ArrayCollection;
			[Bindable] public var coleccionMeses2:ArrayCollection = new ArrayCollection;
			
			[Bindable] public var coleccionFacturada:ArrayCollection = new ArrayCollection;
			[Bindable] public var fs:FeatureSet = new FeatureSet;
			[Bindable] public var rotu:int;
			[Bindable] public var rotuloEncontrado:String;
			[Bindable] public var direccionCompleta:String;
			[Bindable] public var nisBuscado:String;
			[Bindable] public var anexo1:String;
			[Bindable] public var anexo2:String;
			[Bindable] public var tipoEdificacion:String;
			[Bindable] public var sumf:Number;
			[Bindable] public var sumt:Number;
			[Bindable] public var periodo:Number;
			
			public var myGraphicsLayer:GraphicsLayer =  new GraphicsLayer;
			
			private var ColeccionUser:ArrayCollection = new ArrayCollection;
			private var text1:String;
			
			[Bindable]private var coleccion2:ArrayCollection = new ArrayCollection;		
			[Bindable]private var coleccion3:ArrayCollection = new ArrayCollection;
			[Bindable]private var g:Graphic;
						
			protected function basewidget1_initializeHandler(event:FlexEvent):void{
				ConsultarAcceso();
			}
			
			protected function ConsultarAcceso():void {
				
				var queryTaskUserSelected:QueryTask = new QueryTask();
				queryTaskUserSelected.url = comun.url.URL.URL_ACCESO;
				queryTaskUserSelected.useAMF = false;
				var queryEquipoSelected:Query = new Query();
				queryEquipoSelected.outFields = ["*"];
				queryEquipoSelected.returnGeometry = true;     
				queryEquipoSelected.orderByFields = ["usuario"];
				queryEquipoSelected.where = "usuario = '" + User.Usuario + "' AND MODULO ='INGRESO_CLIENTES' AND widget='ADMINAP'" ;
				queryEquipoSelected.spatialRelationship ="esriSpatialRelIntersects";
				queryEquipoSelected.outSpatialReference = map.spatialReference;
				queryTaskUserSelected.execute(queryEquipoSelected, new AsyncResponder(onResult, onFault));
				
				function onResult(featureSet:FeatureSet, token:Object = null):void{
					
					if(featureSet.features.length == 0 ){
						//Alert.show("No tiene permisos para accesder a este modulo\n Comuniquese con el administrador de GISRED")
						
						currentState ="bkmInit";
						lblwarning.visible = true;
						lblwarning2.visible = true;
						pbGisred.visible = true;
						wTemplate.height = 500;
						wTemplate.width = 800;
					}
						//si hay, cuales son los permisos
					else{   
						ColeccionUser.addAll(new ArrayCollection(featureSet.attributes));
						currentState ="bkmConsulta";
						wTemplate.height = 350;
						wTemplate.width = 800;
						
						//agregar tipos de busqueda para grid
						coleccionBusqueda.removeAll();
						coleccionBusqueda = new ArrayCollection([ {item:"NIS"},{item:"PORCENTAJE"}]);
						DDLTipoBusqueda.selectedIndex = 0;
						txtBusqueda.addEventListener(Event.CHANGE,filterGridClientes);
						
						//cargar datos a grid.
						cargarListadoAnalisis();
					}
				}
				
				function onFault(info:Object, token:Object = null):void{   
					Alert.show("No tiene permisos para accesder a este modulo\n Comuniquese con el administrador");
					currentState ="bkmInit";
					lblwarning.visible = true;
					lblwarning2.visible = true;
					pbGisred.visible = true;
					wTemplate.width = 800;
					wTemplate.height = 500;
				}
			}
			
			public function cargarListadoAnalisis():void{
								
				coleccionClientes.removeAll();
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask();
				queryTask.url = urls.URL_CONSUMO_ANUAL;
				queryTask.useAMF = false;
				var query:Query = new Query();
				query.where = "TEO <> 0"
				query.outFields = ['*'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void{
					for(var k: int = 0;k<featureSet.features.length;k++){
						
						var recordGraphic:Graphic = featureSet.features[k];
						coleccionClientes.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
							NIS:recordGraphic.attributes["nis"],							
							TOTAL_FAC:recordGraphic.attributes["FACT"],
							TOTAL_TEO:recordGraphic.attributes["TEO"],
							TOTAL_ANUAL:recordGraphic.attributes["ANUAL"],
							PORCENTAJE: recordGraphic.attributes["PORCENTAJE"],
							/*PORCENTAJE:((recordGraphic.attributes["TEO"]==0) || (recordGraphic.attributes["FACT"]==0)) ? "100.00" : 
							(trim(Math.abs((Number(featureSet.features[k].attributes["ANUAL"])*100.00) /Number(featureSet.features[k].attributes["TEO"])),2)),*/
							gra:recordGraphic});			
					}
					
					dgAnalisis.dataProvider = coleccionClientes;
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","Carga de AP Analisis");
				}
			}
			
			// Redondea un number a 2 decimales 
			//trace(trim(1.12645, 2));  // Muestra: 1.13
			
			public function trim(theNumber, decPlaces) {
				if (decPlaces >= 0) {
					var temp:Number = Math.pow(10, decPlaces);
					return Math.round(theNumber * temp) / temp;
				}
			}
			
			//Filtra o busca seg√∫n tipo de busqueda
			protected function filterGridClientes(event:Event):void{
				
				//preguntar si esta seleccionada nis o query de rango
				
				//Ninguna busqueda seleccionada
				if(DDLTipoBusqueda.selectedIndex == -1){
					Alert.show("Debe seleccionar un tipo de busqueda"); 
					return;
				}
				//buscar por nis (filtrar datos)
				if(DDLTipoBusqueda.selectedIndex == 0){
					lblAviso.text =""
					//Alert.show("Buscar (filtrar) por nis");
					
					/* To get this function to work, only edit variables filterText, columnArray, gridDataProvider, and dataGridName. 
					Everything else is dynamic. Do not edit variable names. */
					var filterText:String = StringUtil.trim(txtBusqueda.text.toLowerCase()); //Trimmed text String to filter by
					var columnArray:Array = ['NIS']; //Datagrid column names to filter on
					var gridDataProvider:ArrayCollection = this.coleccionClientes as ArrayCollection; //Name of datagrid's dataprovider. In this case e.g. databases
					var dataGridName:String = 'dgAnalisis'; //Name of the datagrid you are filtering by
					
					//Do not edit code past this point
					var filteredData:Array = [];
					var added:Boolean=false;
					var i:int;
					var j:int;
					
					// Loop Through Grid
					for(i=0; i < gridDataProvider.length; i++){    
						added = false;
						
						//Loop through grid column
						for(j=0; j<columnArray.length; j++){            
							if(gridDataProvider[i][columnArray[j]]!=null){
								
								//Grab datagrid cell contents, trim it, and convert to lowercase for comparison.
								var filterString:String = gridDataProvider[i][columnArray[j]].toString().toLowerCase();
								
								//Compare the datagrid string(filterString) to the user typed string(filterText).  
								if(!added){      
									//If the datagrid string matches the users string, put it into the array.
									if(filterString.indexOf(filterText) != -1){
										filteredData.push(gridDataProvider[i]);
										added = true;
									} 
								}else{
									//Do nothing, break out.
									break;
								}
							}    
						}
					}
					
					//Set datagrid dataprovider
					if(filterText.length == 0){
						this[dataGridName].dataProvider = gridDataProvider; //Display the original unfiltered data
					}else{
						this[dataGridName].dataProvider = filteredData; //Pusht he filtered data into the datagrid
					}
				
				//buscar por rango de porcentaje (en servicio)
				}else{
					
					lblAviso.text ="Presione el bot√≥n para buscar el rango de porcentaje."
					
				}
				
			}	
			
			public function buscarRangoPorciento():void{
				
			}
			
			private var ef:ExcelFile;
			private var ba:ByteArray;
			private var fr:FileReference;
			private var frSave:FileReference;
			
			protected function btnExportarDatosClientes_clickHandler(event:MouseEvent):void
			{
				
				// TODO Auto-generated method stub
				switch(event.currentTarget.id)
				{
					case "btnExportar1":
					{
						
						var s:Sheet = new Sheet();
						s.resize(coleccionClientes.length+1,12);
						s.setCell(0,0,"NIS");
						s.setCell(0,1,"TOTAL_FACT");
						s.setCell(0,2,"TOTAL_TEO");
						s.setCell(0,3,"TOTAL_ANUAL");
						s.setCell(0,4,"PORCENTAJE(%)");
						
						for(var j:int=0;j<coleccionClientes.length;j++)
						{
							/*
							<mx:DataGridColumn dataField="OBJECTID" headerText="OBJECTID" width="30" visible="false"/>                                                         
							<mx:DataGridColumn dataField="NIS" headerText="NIS" width="50" /> 
							<mx:DataGridColumn dataField="TOTAL_FAC" headerText="TOTAL_FAC" visible="true" width="50" />
							<mx:DataGridColumn dataField="TOTAL_TEO" headerText="TOTAL_TEO" visible="true" width="50" />
							<mx:DataGridColumn dataField="TOTAL_ANUAL" headerText="TOTAL_ANUAL" visible="true" width="50" />
							<mx:DataGridColumn dataField="PORCENTAJE" headerText="PORCENTAJE (%)" width="50"/>
							 * */
							s.setCell(j+1,0,coleccionClientes[j].NIS);										
							s.setCell(j+1,1,coleccionClientes[j].TOTAL_FAC);
							s.setCell(j+1,2,coleccionClientes[j].TOTAL_TEO);
							s.setCell(j+1,3,coleccionClientes[j].TOTAL_ANUAL);
							s.setCell(j+1,4,coleccionClientes[j].PORCENTAJE);
							
						}
						
						try {
							var fileTosave:ExcelFile = new ExcelFile();
							fileTosave.sheets.addItem(s);
							
							var fileBytes:ByteArray = fileTosave.saveToByteArray();
							frSave = new FileReference();
							frSave.save(fileBytes,"ExportacionAnalisisAP.xls");
							frSave.addEventListener(Event.COMPLETE,grabadoListo);
							
						}catch(e:ErrorMessage){
							Alert.show("Error al guardar archivo" + e);
							
						}
						
						break;
					}
						
						
					default:{
						//Alert.show("Ningun archivo ha sido generado");
						break;
					}
				}			
			}
			
			public function grabadoListo(event:Event):void{
				Alert.show("Listo");
			}
			
			protected function bkmInit_initializeHandler(event:FlexEvent):void{
				// TODO Auto-generated method stub
				var verImageGISRED:Image = new Image;
				
				//imagen configuraciones
				verImageGISRED.scaleContent = true;
				verImageGISRED.maintainAspectRatio =false;
				verImageGISRED.percentWidth = 870;
				verImageGISRED.percentHeight = 500;
				verImageGISRED.source =  "assets/images/128x128.png";
				pbGisred.addChild(verImageGISRED);
				
			}
			
			protected function btnBusquedaImg_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
			}
			
			protected function DDLTipoBusqueda_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				txtBusqueda.text="";
				lblAviso.text="";
			}
			
			protected function dgAnalisis_itemClickHandler(event:ListEvent):void{
				// TODO Auto-generated method stub
				currentState ="bkmConsultaMeses";
				bkmConsultaMeses.visible = true;
				wTemplate.height = 350;
				wTemplate.width = 800;
				//myViewStack.selectedIndex = 0;
				//poblar grids teorico / facturado
				
				valoresTeoricos(dgAnalisis.selectedItem['NIS']);
				valoresFacturados(dgAnalisis.selectedItem['NIS']);
				buscarEquipoAP(dgAnalisis.selectedItem['NIS']);
				//editar label para nis seleccionado.
				lblCurrentNISSelected.text = "Seleccionado |  NIS: "+ dgAnalisis.selectedItem['NIS'];
				
			}
			
			public function valoresTeoricos(nis: int):void{
				lbltotalsumt.text = "";
				coleccionTeorica.removeAll();
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask();
				queryTask.url = urls.URL_CONSUMOS_TEORICOS;
				queryTask.useAMF = false;
				var query:Query = new Query();
				query.where = "nis=" + nis;
				query.outFields = ['*'];
				query.returnGeometry = false;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void{
					var k:int;
					if(!featureSet.features.length){
						lbltotalsumt.text = "";
					}else{
						//calcular segun la fecha de origen:
						calcular12Meses(featureSet.features[0].attributes["periodo_ini"], "TEORICO");
						//Alert.show(coleccionMeses.length.toString());
						for(var k:int = 0; k<featureSet.features.length; k++){
							
							var recordGraphic:Graphic = featureSet.features[k];
							coleccionTeorica.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
								NIS:recordGraphic.attributes["nis"],							
								PERIODO:recordGraphic.attributes["periodo_ini"],
								t_mes0:recordGraphic.attributes["mes_0"],
								t_mes1:recordGraphic.attributes["mes_1"],
								t_mes2:recordGraphic.attributes["mes_2"],
								t_mes3:recordGraphic.attributes["mes_3"],
								t_mes4:recordGraphic.attributes["mes_4"],
								t_mes5:recordGraphic.attributes["mes_5"],
								t_mes6:recordGraphic.attributes["mes_6"],
								t_mes7:recordGraphic.attributes["mes_7"],
								t_mes8:recordGraphic.attributes["mes_8"],
								t_mes9:recordGraphic.attributes["mes_9"],
								t_mes10:recordGraphic.attributes["mes_10"],
								t_mes11:recordGraphic.attributes["mes_11"],
								t_mes12:recordGraphic.attributes["mes_12"],
								gra:recordGraphic});
							
							sumt = Number(
								featureSet.features[k].attributes["mes_0"]+
								featureSet.features[k].attributes["mes_1"]+
								featureSet.features[k].attributes["mes_2"]+
								featureSet.features[k].attributes["mes_3"]+
								featureSet.features[k].attributes["mes_4"]+
								featureSet.features[k].attributes["mes_5"]+
								featureSet.features[k].attributes["mes_6"]+
								featureSet.features[k].attributes["mes_7"]+
								featureSet.features[k].attributes["mes_8"]+
								featureSet.features[k].attributes["mes_9"]+
								featureSet.features[k].attributes["mes_10"]+
								featureSet.features[k].attributes["mes_11"]+
								featureSet.features[k].attributes["mes_12"]);
							lbltotalsumt.text = sumt.toString();
						}
					}
					
					
					dgTeorico.dataProvider = coleccionTeorica;
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","Carga de AP Analisis Teorico");
				}
			}
			
			public function valoresFacturados(nis:String):void{
				lbltotalsumf.text = "";
				coleccionFacturada.removeAll();
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask();
				queryTask.url = urls.URL_CONSUMOS_FACTURADOS;
				queryTask.useAMF = false;
				var query:Query = new Query();
				query.where = "nis=" + nis;
				query.outFields = ['*'];
				query.returnGeometry = false;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void{
					if(!featureSet.features.length){
						lbltotalsumf.text = "";
					}else{
						calcular12Meses(featureSet.features[0].attributes["periodo_ini"], "FACTURADO");
						for(var k: int = 0;k<featureSet.features.length;k++){
							
							var recordGraphic:Graphic = featureSet.features[k];
							coleccionFacturada.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
								NIS:recordGraphic.attributes["nis"],							
								PERIODO:recordGraphic.attributes["periodo_ini"],
								f_mes0:recordGraphic.attributes["mes_0"],
								f_mes1:recordGraphic.attributes["mes_1"],
								f_mes2:recordGraphic.attributes["mes_2"],
								f_mes3:recordGraphic.attributes["mes_3"],
								f_mes4:recordGraphic.attributes["mes_4"],
								f_mes5:recordGraphic.attributes["mes_5"],
								f_mes6:recordGraphic.attributes["mes_6"],
								f_mes7:recordGraphic.attributes["mes_7"],
								f_mes8:recordGraphic.attributes["mes_8"],
								f_mes9:recordGraphic.attributes["mes_9"],
								f_mes10:recordGraphic.attributes["mes_10"],
								f_mes11:recordGraphic.attributes["mes_11"],
								f_mes12:recordGraphic.attributes["mes_12"],
								gra:recordGraphic});	
							
							sumf = Number(
								featureSet.features[k].attributes["mes_0"]+
								featureSet.features[k].attributes["mes_1"]+
								featureSet.features[k].attributes["mes_2"]+
								featureSet.features[k].attributes["mes_3"]+
								featureSet.features[k].attributes["mes_4"]+
								featureSet.features[k].attributes["mes_5"]+
								featureSet.features[k].attributes["mes_6"]+
								featureSet.features[k].attributes["mes_7"]+
								featureSet.features[k].attributes["mes_8"]+
								featureSet.features[k].attributes["mes_9"]+
								featureSet.features[k].attributes["mes_10"]+
								featureSet.features[k].attributes["mes_11"]+
								featureSet.features[k].attributes["mes_12"]);
							
							lbltotalsumf.text = sumf.toString();
						}		
					}
					
					
					dgFacturado.dataProvider = coleccionFacturada;
					periodo = featureSet.features[0].attributes["periodo_ini"]
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","Carga de AP Analisis Facturado");
				}
			}
			
			
			//Calculo 12 meses anteriores
			public function calcular12Meses(perIni:Number, tipoAnalisis:String):void{
				//para analisis teorico
				if(tipoAnalisis=="TEORICO"){
					coleccionMeses.removeAll();
					
					//t_mes0.headerText = "Agosto";
					var dateFormatStr:String = "MM"; 
					
					var m0:String = msToDate(perIni,dateFormatStr,true);
					t_mes0.headerText = int(m0).toString(); 
					
					var i:int = int(m0);
					var m:int = 12;
					
					for (i; i <= m; i++){
						coleccionMeses.addItem({mes:i});
						
						if(i==12){
							i=0;
							m=int(m0);
						}
					}
					
					for (var j:int = 0; j < coleccionMeses.length; j++){
						//Alert.show(coleccionMeses[j]["mes"].toString());
						switch(j)
						{
							case 0:{
								t_mes12.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 1:{
								
								t_mes11.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 2:{
								
								t_mes10.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 3:{
								
								t_mes9.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 4:{
								t_mes8.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 5:{
								t_mes7.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 6:{
								t_mes6.headerText= coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 7:{
								t_mes5.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 8:{
								t_mes4.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 9:{
								t_mes3.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 10:{
								t_mes2.headerText= coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 11:{
								t_mes1.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
								
								
							default:
							{
								break;
							}
						}
					}
				
				}
				if(tipoAnalisis=="FACTURADO"){
					coleccionMeses.removeAll();
					
					//t_mes0.headerText = "Agosto";
					var dateFormatStr2:String = "MM"; 
					
					var m00:String = msToDate(perIni,dateFormatStr2,true);
					f_mes0.headerText = int(m00).toString(); 
					
					var i:int = int(m00);
					var m:int = 12;
					
					for (i; i <= m; i++){
						coleccionMeses.addItem({mes:i});
						
						if(i==12){
							i=0;
							m=int(m00);
						}
					}
					
					for (var j:int = 0; j < coleccionMeses.length; j++){
						//Alert.show(coleccionMeses[j]["mes"].toString());
						switch(j)
						{
							case 0:{
								f_mes12.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 1:{
								
								f_mes11.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 2:{
								
								f_mes10.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 3:{
								
								f_mes9.headerText = coleccionMeses[j]["mes"].toString();
								break;
							}
							case 4:{
								f_mes8.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 5:{
								f_mes7.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 6:{
								f_mes6.headerText= coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 7:{
								f_mes5.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 8:{
								f_mes4.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 9:{
								f_mes3.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 10:{
								f_mes2.headerText= coleccionMeses[j]["mes"].toString();
								
								break;
							}
							case 11:{
								f_mes1.headerText = coleccionMeses[j]["mes"].toString();
								
								break;
							}
								
								
							default:
							{
								break;
							}
						}
					}
					
				}
				
			}
			
			/*
			* return a date string from a number and a format string and use UTC value
			* @param Number ms the number representation of the date
			* @param String dateFormat the date format to return the string in
			* @param Boolean useUTC wheter ofr not the date is UTC or local time
			*/
			private function msToDate(ms:Number, dateFormat:String, useUTC:Boolean):String  
			{  
				var date:Date = new Date(ms);  
				if (date.milliseconds == 999){ // workaround for REST bug  
					date.milliseconds++;  
				}  
				if (useUTC){  
					date.minutes += date.timezoneOffset;  
				}  
				if (dateFormat){		
					
					dateFormatter.dateTimePattern = dateFormat;  
					var result:String = dateFormatter.format(date);  
					if (result){  
						return result;  
					}else{  
						return dateFormatter.errorText;  
					}  
				}else{  
					return date.toLocaleString(); 
					
				}  
			}  
			
			//buscar id equipo ap
			protected function buscarEquipoAP(nis:int):void
			{
				graphicsLayer.clear();
				var queryTaskEquipo:QueryTask = new QueryTask();
				queryTaskEquipo.url = urls.URL_MEDIDOR;
				queryTaskEquipo.useAMF = false;
				var queryEquipo:Query = new Query();
				queryEquipo.outFields = ["id_medidor","nis"];
				queryEquipo.returnGeometry = true;
				queryEquipo.where = "nis="+ nis;
				queryTaskEquipo.execute(queryEquipo, new AsyncResponder(onResult, onFault));
				
				
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					for each (var myGraphic:Graphic in featureSet.features)
					{	
						myGraphic.symbol=slsFindMedidor;
						graphicsLayer.add(myGraphic); 
						map.zoomTo(myGraphic.geometry);
						gridEquipoxTramo(featureSet.features[0].attributes["id_medidor"]);
						luminariasAsociadas(featureSet.features[0].attributes["id_medidor"]);
					}
					map.addLayer(graphicsLayer);
				}
				function onFault(info:Object, token:Object = null):void
				{
					Alert.show("no se puede cargar equipo "+ info.toString());
				}
				
			}
			
			public function luminariasAsociadas(id:String):void
			{
				coleccion2.removeAll();
				var queryTaskEq:QueryTask = new QueryTask();
				queryTaskEq.url = urls.URL_LUMINARIAS;
				queryTaskEq.useAMF = false;
				var queryEq:Query = new Query();
				queryEq.outFields = ["*"];
				queryEq.returnGeometry = true;				
				queryEq.where = "ID_EQUIPO_AP =" + id ;
				queryEq.spatialRelationship ="esriSpatialRelIntersects";
				queryEq.outSpatialReference = map.spatialReference;
				queryTaskEq.execute(queryEq, new AsyncResponder(onResult, onFault));
				
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					try{
						coleccion2.addAll(new ArrayCollection(featureSet.attributes));
						for (var i:int; i<featureSet.features.length; i++) 
						{
							var mp:MapPoint=featureSet.features[i].geometry as MapPoint;
							var g:Graphic = new Graphic(new MapPoint(mp.x,mp.y, new SpatialReference(102100)));
							g.symbol =  new SimpleMarkerSymbol("diamond", 15,0x00FF00,0.7);
							graphicsLayer.add(g);
						}
						
						map.addLayer(graphicsLayer);
						dgListadoLuminarias.dataProvider = coleccion2;
					}catch(err:Error){
						Alert.show("No se pudo cargar los datos, por favor refrescar la p√°gina");
					}
				}
				function onFault(info:Object, token:Object = null):void
				{   
					Alert.show("equipos no encontrados");
				}
			}
			
			protected function gridEquipoxTramo(seleccionado:int):void
			{   
				var queryTaskEquipoSelected:QueryTask = new QueryTask();
				queryTaskEquipoSelected.url = urls.URL_TRAMOS;
				queryTaskEquipoSelected.useAMF = false;
				var queryEquipoSelected:Query = new Query();
				queryEquipoSelected.outFields = ["*"];
				queryEquipoSelected.returnGeometry = true;				
				queryEquipoSelected.where = "id_equipo_ap =" + seleccionado;			
				queryEquipoSelected.spatialRelationship ="esriSpatialRelIntersects";
				queryEquipoSelected.outSpatialReference = map.spatialReference;
				queryTaskEquipoSelected.execute(queryEquipoSelected, new AsyncResponder(onResult, onFault));
				
				var arrPoints:Array = new Array;
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					try{
						for each (var myGraphic:Graphic in featureSet.features)
						{
							myGraphic.symbol=slsFindMedidorxTramo;
							graphicsLayer.add(myGraphic); 
							
						}
						
					}catch(err:Error){
						Alert.show("no se pudo cargar el tramo del equipo asociado");
					}
				}
				
				function onFault(info:Object, token:Object = null):void
				{   
					Alert.show("id de equipo no encontrada para asociacion con tramo");
				}
			}
			
			protected function btnVolverAtras_clickHandler(event:MouseEvent):void{
				currentState ="bkmConsulta";
				bkmConsulta.visible = true;
				wTemplate.height = 350;
				wTemplate.width = 800;
			}
			
			protected function btnVerDetalle_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				currentState ="bkmConsultaDetalle";
				bkmConsultaDetalle.visible = true;
				wTemplate.height = 350;
				wTemplate.width = 800;
				
				lblCurrentNISSelected2.text = "Seleccionado |  NIS: "+ dgAnalisis.selectedItem['NIS'];
			}
			
			protected function btnVolverInicio_clickHandler(event:MouseEvent):void
			{
				
				currentState ="bkmConsulta";
				bkmConsulta.visible = true;
				wTemplate.height = 350;
				wTemplate.width = 800;
			}
			
			protected function btnVolverAtrasMeses_clickHandler(event:MouseEvent):void
			{
				currentState ="bkmConsultaMeses";
				bkmConsultaMeses.visible = true;
				wTemplate.height = 350;
				wTemplate.width = 800;
				
			}
			
			protected function dgListadoLuminarias_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				graphicsLayer.remove(g);	
				var queryTaskLumSel:QueryTask = new QueryTask();
				queryTaskLumSel.url = urls.URL_LUMINARIAS;
				queryTaskLumSel.useAMF = false;
				var queryLumSel:Query = new Query();
				queryLumSel.outFields = ["*"];
				queryLumSel.returnGeometry = true;
				queryLumSel.where = "ID_LUMINARIA =" + dgListadoLuminarias.selectedItem['ID_LUMINARIA'];	
				queryLumSel.spatialRelationship ="esriSpatialRelIntersects";
				queryLumSel.outSpatialReference = map.spatialReference;
				queryTaskLumSel.execute(queryLumSel, new AsyncResponder(onResult, onFault));
				
				
				function onResult(featureSet:FeatureSet, token:Object = null):void
				{
					try{
						
						map.zoomTo(featureSet.features[0].geometry);				
						map.level = 18;
						
						var mp:MapPoint=featureSet.features[0].geometry as MapPoint;
						
						g = new Graphic(new MapPoint(mp.x,mp.y, new SpatialReference(102100)));
						g.symbol =  new SimpleMarkerSymbol("circle",20,0xFF00FF,1);
						graphicsLayer.add(g);
						
						
						
					}catch(err:Error){
						Alert.show("no se pudo hacer zoom a la luminaria seleccionada");
					}
					
				}
				
				function onFault(info:Object, token:Object = null):void{   
					Alert.show("id de luminaria no encontrada");
				}
				
			}
			
			protected function canvasFacturado_tabEnabledChangeHandler(event:Event):void{
				// TODO Auto-generated method stub
				dgFacturado.dataProvider = coleccionFacturada;
				//Alert.show("hola"+event.currentTarget.id);
				//calcular12Meses(periodo, "FACTURADO");
			}
			
			
			
			protected function imgBusqueda_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
				//Buscar rango de porcentaje entre [-% y +%]
				
				
				coleccionClientes.removeAll();
				var neg:Number = Number(txtBusqueda.text);
				neg = -neg;
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask();
				queryTask.url = urls.URL_CONSUMO_ANUAL;
				queryTask.useAMF = false;
				var query:Query = new Query();
				query.where = "(PORCENTAJE > " + txtBusqueda.text + "OR PORCENTAJE <"+neg + ") AND TEO <> 0";
				query.outFields = ['*'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void{
					for(var k: int = 0;k<featureSet.features.length;k++){
						
						var recordGraphic:Graphic = featureSet.features[k];
						coleccionClientes.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
							NIS:recordGraphic.attributes["nis"],							
							TOTAL_FAC:recordGraphic.attributes["FACT"],
							TOTAL_TEO:recordGraphic.attributes["TEO"],
							TOTAL_ANUAL:recordGraphic.attributes["ANUAL"],
							PORCENTAJE: recordGraphic.attributes["PORCENTAJE"],
							/*PORCENTAJE:((recordGraphic.attributes["TEO"]==0) || (recordGraphic.attributes["FACT"]==0)) ? "100.00" : 
							(trim(Math.abs((Number(featureSet.features[k].attributes["ANUAL"])*100.00) /Number(featureSet.features[k].attributes["TEO"])),2)),*/
							gra:recordGraphic});			
					}
					
					dgAnalisis.dataProvider = coleccionClientes;
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","B√∫squeda de Analisis por Porcentaje");
				}
				
			}
			
			protected function btnRecargar_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
				cargarListadoAnalisis();
			}
			
			protected function btnExportar1_clickHandler(event:MouseEvent):void{
				// TODO Auto-generated method stub
				
			}
			
			protected function txtBusqueda_enterFrameHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function wTemplate_closedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				myGraphicsLayer.clear();
			}
			
		]]>
	</fx:Script>
	<viewer:WidgetTemplate id="wTemplate"                      
						   width="870" height="500"
						   visible="true" closed="wTemplate_closedHandler(event)">
		
		<s:Group id="bkmInit" width="100%" height="100%" initialize="bkmInit_initializeHandler(event)"
				 visible="false" visible.bkmInit="true">	
			<s:VGroup horizontalAlign="center" height="100%" width="100%" verticalAlign="middle">
				<mx:Canvas width="200" height="200" id="pbGisred" color="0x000000" horizontalScrollPolicy="off"
						   verticalScrollPolicy="off" visible="false"/>                                           
				<s:Label id="lblwarning" text="No tiene permisos para acceder a este m√≥dulo." 
						 fontSize="16" visible="false" paddingTop="10"/>
				<s:Label id="lblwarning2" text="Comuniquese con el administrador de GISRED" 
						 fontSize="16" visible="false" paddingTop="10"/>
			</s:VGroup>
		</s:Group> 
		
		<s:Group id="bkmConsulta" width="100%" height="100%" visible="false" visible.bkmConsulta="true">
			<mx:Canvas id="listadoAnalisis" label="AN√ÅLISIS" width="100%" height="100%">
				<s:VGroup width="100%" top="5" bottom="5" height="50%">
					<mx:Label id="Lblclie"  text="AN√ÅLISIS DE AP" fontSize="18"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:DropDownList id="DDLTipoBusqueda" change="DDLTipoBusqueda_changeHandler(event)" prompt="Seleccione Tipo Busqueda" width="150" labelField="item" dataProvider="{coleccionBusqueda}"/>
						
						<mx:TextInput x="10" id="txtBusqueda" width="80%" height="30" fontSize="14" fontWeight="bold" enterFrame="txtBusqueda_enterFrameHandler(event)" />
						<s:Label id="lblAviso" text="" fontSize="10" visible="true" paddingTop="1"/>
						<mx:Image id="imgBusqueda" click="imgBusqueda_clickHandler(event)" x="504" y="10" width="35" height="33"  source="assets/images/lupa_40x40.png" />
						
					</s:HGroup>
						<mx:DataGrid itemClick="dgAnalisis_itemClickHandler(event)"  id="dgAnalisis" resizableColumns="true" sortableColumns="true" editable="false" width="100%" height="100%" visible="true" selectable="true" >
							<mx:columns>        
								<mx:DataGridColumn dataField="OBJECTID" headerText="OBJECTID" width="30" visible="false"/>                                                         
								<mx:DataGridColumn dataField="NIS" headerText="NIS" width="50" /> 
								<mx:DataGridColumn dataField="TOTAL_FAC" headerText="TOTAL_FAC" visible="true" width="50" />
								<mx:DataGridColumn dataField="TOTAL_TEO" headerText="TOTAL_TEO" visible="true" width="50" />
								<mx:DataGridColumn dataField="TOTAL_ANUAL" headerText="TOTAL_ANUAL" visible="true" width="50" />
								<mx:DataGridColumn dataField="PORCENTAJE" headerText="PORCENTAJE (%)" width="50"/>
						    </mx:columns>
						</mx:DataGrid> 
						
						<mx:HRule width="100%">
							
						</mx:HRule>
					<s:HGroup horizontalAlign="right" width="100%">
						<s:Button id="btnExportar1" label="Exportar" click="btnExportarDatosClientes_clickHandler(event)"/>
						<s:Button id="btnRecargar" label="Cargar Listado Completo" click="btnRecargar_clickHandler(event)"/>
					</s:HGroup>
					
				</s:VGroup>
			</mx:Canvas>
		</s:Group>
		
		<s:Group id="bkmConsultaMeses" width="100%" height="100%" visible="false" visible.bkmConsultaMeses="true">
			<s:VGroup width="100%" height="100%" top="5" bottom="5">
				<s:HGroup width="100%">
					<mx:Label id="lblCurrentNISSelected" fontSize="12"/>
				</s:HGroup>
					
				<mx:HRule width="100%"></mx:HRule>
				<mx:Label fontSize="12" text="Te√≥rico"/>
					<mx:DataGrid width="100%" height="15%" id="dgTeorico" resizableColumns="true" sortableColumns="true" editable="false" visible="true" selectable="true" >
						<mx:columns>        
							<mx:DataGridColumn  dataField="NIS" headerText="OBJECTID" minWidth="30" width="30" visible="false"/>                                                         
							<mx:DataGridColumn id="t_mes0" dataField="t_mes0" headerText="MES 0" width="50" minWidth="50" /> 
							<mx:DataGridColumn id="t_mes1" dataField="t_mes1" headerText="MES 1" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes2" dataField="t_mes2" headerText="MES 2" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes3" dataField="t_mes3" headerText="MES 3" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes4" dataField="t_mes4" headerText="MES 4" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes5" dataField="t_mes5" headerText="MES 5" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes6" dataField="t_mes6" headerText="MES 6" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes7" dataField="t_mes7" headerText="MES 7" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes8" dataField="t_mes8" headerText="MES 8" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes9" dataField="t_mes9" headerText="MES 9" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes10" dataField="t_mes10" headerText="MES 10" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes11" dataField="t_mes11" headerText="MES 11" width="50" minWidth="50"/> 
							<mx:DataGridColumn id="t_mes12" dataField="t_mes12" headerText="MES 12" width="50" /> 
						</mx:columns>
					</mx:DataGrid>
					<s:HGroup width="100%" >
						<!--<mx:Image width="20" source="assets/images/sumatoria_icon.png" id="icono_sumatoriaT" />-->
						<mx:Label id="lblsum12t" fontSize="12" text="Œ£ Te√≥rico 12 MESES: " />
						<mx:Label id="lbltotalsumt" fontSize="12" text="{sumt}"/>
					</s:HGroup>
				
				
				<mx:Label fontSize="12" text="Facturado"/>
				<mx:DataGrid width="100%" height="15%" dataProvider="{coleccionFacturada}" id="dgFacturado" resizableColumns="true" sortableColumns="true" editable="false" visible="true" selectable="true" >
					<mx:columns>        
						<mx:DataGridColumn  dataField="NIS" headerText="OBJECTID" minWidth="30" width="30" visible="false"/>                                                         
						<mx:DataGridColumn id="f_mes0" dataField="f_mes0" headerText="MES 0" width="50" minWidth="50" /> 
						<mx:DataGridColumn id="f_mes1" dataField="f_mes1" headerText="MES 1" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes2" dataField="f_mes2" headerText="MES 2" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes3" dataField="f_mes3" headerText="MES 3" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes4" dataField="f_mes4" headerText="MES 4" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes5" dataField="f_mes5" headerText="MES 5" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes6" dataField="f_mes6" headerText="MES 6" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes7" dataField="f_mes7" headerText="MES 7" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes8" dataField="f_mes8" headerText="MES 8" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes9" dataField="f_mes9" headerText="MES 9" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes10" dataField="f_mes10" headerText="MES 10" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes11" dataField="f_mes11" headerText="MES 11" width="50" minWidth="50"/> 
						<mx:DataGridColumn id="f_mes12" dataField="f_mes12" headerText="MES 12" width="50" /> 
					</mx:columns>
				</mx:DataGrid> 
				
				<s:HGroup>
					<mx:Label id="lblsum12f" fontSize="12" text="Œ£ Facturado 12 MESES: " />
					<mx:Label id="lbltotalsumf" fontSize="12" text="{sumt}"/>
				</s:HGroup>
				<s:HGroup horizontalAlign="right" width="100%">
					<s:Button id="btnVerDetalle" label="Ver detalle luminarias" click="btnVerDetalle_clickHandler(event)"/>
					<s:Button id="btnVolverAtras" label="Volver atr√°s" click="btnVolverAtras_clickHandler(event)" />
				</s:HGroup>
				
			</s:VGroup>
				
			
		</s:Group>
		
		<s:Group id="bkmConsultaDetalle" width="100%" height="100%" visible="false" visible.bkmConsultaDetalle="true">
			<mx:Canvas id="listadoLuminarias" label="Detalle Luminarias" width="100%" height="100%">
				<s:VGroup width="100%" top="5" bottom="5" height="80%">
					<mx:Label id="lblLuminarias" text="LISTADO LUMINARIAS" fontSize="18"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:VGroup width="100%" verticalAlign="middle">
							<mx:Label id="lblCurrentNISSelected2" fontSize="12"/>
						</s:VGroup>
					</s:HGroup>
					<mx:DataGrid id="dgListadoLuminarias" resizableColumns="true" sortableColumns="true" editable="false" width="100%" height="100%" visible="true" selectable="true" itemClick="dgListadoLuminarias_itemClickHandler(event)" >
						<mx:columns>        
							<mx:DataGridColumn  dataField="OBJECTID" headerText="OBJECTID" width="30" visible="false"/>                                                         
							<mx:DataGridColumn dataField="ID_LUMINARIA" headerText="ID_LUMINARIA" width="50" /> 
							<mx:DataGridColumn dataField="DESCRIPCION" headerText="DESCRIPCION" visible="true" width="50" />
						</mx:columns>
					</mx:DataGrid> 
					
					<mx:HRule width="100%">
						
					</mx:HRule>
					<s:HGroup horizontalAlign="right" width="100%">
						<s:Button id="btnVolverInicio" label="Volver al inicio" click="btnVolverInicio_clickHandler(event)"/>
						<s:Button id="btnVolverAtrasMeses" label="Volver atr√°s" click="btnVolverAtrasMeses_clickHandler(event)"/>
					</s:HGroup>
				</s:VGroup>
			</mx:Canvas>
		</s:Group>
		
	</viewer:WidgetTemplate>
</viewer:BaseWidget>