<?xml version="1.0" encoding="utf-8"?>
<!--
    See SearchWidget.mxml for release details
-->
<Search:ResizeTitleWindow  xmlns:fx="http://ns.adobe.com/mxml/2009" 
                           xmlns:s="library://ns.adobe.com/flex/spark" 
                           xmlns:mx="library://ns.adobe.com/flex/mx"
                           xmlns:Search="widgets.eSearch.*"
                           xmlns:esri="http://www.esri.com/2008/ags"
                           width="622" 
                           height="300" 
                           title="Search Results"
                           close="closeMe()" 
                           creationComplete="init()" 
                           cornerRadius="6"
                           skinClass="widgets.eSearch.skins.ResizeTitleWindowSkin">
    <Search:layout>
        <s:VerticalLayout horizontalAlign="center" verticalAlign="middle" />
    </Search:layout>
    <fx:Script>
        <![CDATA[
            import com.esri.ags.Graphic;
            import com.esri.ags.Map;
            import com.esri.ags.geometry.Extent;
            import com.esri.ags.geometry.Geometry;
            import com.esri.ags.geometry.MapPoint;
            import com.esri.ags.layers.FeatureLayer;
            import com.esri.ags.layers.supportClasses.CodedValue;
            import com.esri.ags.layers.supportClasses.CodedValueDomain;
            import com.esri.ags.layers.supportClasses.FeatureType;
            import com.esri.ags.layers.supportClasses.LayerDetails;
            import com.esri.ags.layers.supportClasses.TableDetails;
            import com.esri.ags.portal.PopUpRenderer;
            import com.esri.ags.portal.supportClasses.PopUpInfo;
            import com.esri.ags.portal.supportClasses.PopUpMediaInfo;
            import com.esri.ags.utils.GraphicUtil;
            import com.esri.ags.utils.StringUtil;
            import com.esri.viewer.BaseWidget;
            import com.esri.viewer.ViewerContainer;
            
            import mx.collections.ArrayCollection;
            import mx.collections.ArrayList;
            import mx.collections.IViewCursor;
            import mx.controls.Alert;
            import mx.core.FlexGlobals;
            import mx.managers.PopUpManager;
            import mx.utils.ObjectUtil;
            
            import spark.collections.Sort;
            import spark.collections.SortField;
            import spark.components.DataGrid;
            import spark.components.gridClasses.GridColumn;
            import spark.events.GridEvent;
            import spark.events.GridSelectionEvent;
            import spark.formatters.CurrencyFormatter;
            import spark.formatters.DateTimeFormatter;
            import spark.formatters.NumberFormatter;
            
            import widgets.eSearch.skins.DataGridSkin;
            import widgets.eSearch.utils.PrintProperties;
            import widgets.eSearch.utils.PrintUtil;
        
            private var _data:Array;
            private var hitimer:uint;
            private var _qFeatLyr:FeatureLayer;
            private var _featLayer:FeatureLayer;
            private var _resultsGrid:DataGrid;
            private var highlightedGraphic:Graphic;
            private var _zoomScale:Number = 5000;
            private var _zoomPercent:Number = 1.2;
            private var _bWidget:*;
            private var _dgColumns:Array=[];
            private var _dgFieldAliases:Object;
            private var _dgHyperColumns:Array=[];
            private var hypercols:ArrayCollection;
            private var _csvName:String;
            private var dateFormatter:DateTimeFormatter = new DateTimeFormatter();
            private var numFormatter:NumberFormatter = new NumberFormatter();
            private var currFormatter:CurrencyFormatter = new CurrencyFormatter();
            private var _dateFormat:String = "";
            private var _currFormat:String = "";
            private var _numFormat:String = "";
            private var _csvSep:String = ",";
            private var _textQualifier:String = '"';
            private var _layerDetails:* = null;
            [Bindable] private var _hasRelates:Boolean;
            [Bindable] private var _exp2csvBtnLbl:String;
            [Bindable] private var _exp2txtBtnLbl:String;
            [Bindable] private var _exportButtonLbl:String;
            [Bindable] private var _enableExport:Boolean;
            [Bindable] private var _enablePrint:Boolean;
            [Bindable] private var _widgetInteract:Boolean;
            [Bindable] private var _popupsdiabled:Boolean;
            [Bindable] private var sumVisible:Boolean;
            [Bindable] private var _labelSum:String;
            [Bindable] private var _labelPrint:String;
            [Bindable] private var _relateTooltip:String = "Show Relates";
            [Bindable] private var _relateIcon:String = "widgets/eSearch/assets/images/i_relate.png";
            private var _sumField:String = "";
            private var sumFormat:String;
            private var sortDetails:String = "";
            private var useUTC:Boolean;
            [Bindable] private var _title:String;
            private var sortAC:ArrayCollection;
            private var dgSort:Sort = new Sort();
            private var HeaderText:Object = {};
            private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
            private var map:Map = ViewerContainer.getInstance().mapManager.map;
            private var columnIndexes:Vector.<int>;
            private var _headerBGColor:uint;
            private var _headerFontColor:uint;
            private var _repeatHeader:Boolean;
            private var _footerIncludeDate:Boolean;
            private var _footerDateFormat:String;
            private var _footerPageofPage:String;
            private var _footerDisclaimer:String;
            private var gFieldsAc:ArrayCollection;
            [Bindable] private var _subselectioncolor:uint;
            [Bindable] private var _subselectiontextcolor:uint;
            
            public function set subselectioncolor(value:uint):void
            {
                _subselectioncolor = value;
            }
            
            public function set subselectiontextcolor(value:uint):void
            {
                _subselectiontextcolor = value;
            }
            
            public function set featlayer(value:FeatureLayer):void
            {
                _qFeatLyr = value;
            }
            
            public function set dgtitle(value:String):void
            {
                _title = title = value;
            }
            
            public function set labelSum(value:String):void
            {
                _labelSum = value;
            }
            
            public function set headerBGColor(value:uint):void
            {
                _headerBGColor = value;
            }
            
            public function set headerFontColor(value:uint):void
            {
                _headerFontColor = value;
            }
            
            public function set repeatHeader(value:Boolean):void
            {
                _repeatHeader = value;
            }
            
            public function set printLabel(value:String):void
            {
                _labelPrint = value;
            }
            
            public function set sumField(value:String):void
            {
                _sumField = value;
                if(value != ""){
                    sumVisible = true;
                }else{
                    _labelSum = "";
                    sumVisible = false;
                }
            }
            
            public function set enableExport(value:Boolean):void
            {
                _enableExport = value;
            }
            
            public function set enablePrint(value:Boolean):void
            {
                _enablePrint = value;
            }
            
            public function set hasRelates(value:Boolean):void
            {
                _hasRelates = value;
            }
            
            public function set widgetInteract(value:Boolean):void
            {
                _widgetInteract = value;
            }
            
            public function set popupsdiabled(value:Boolean):void
            {
                _popupsdiabled = value;
            }
            
            public function set ownerWidget(value:BaseWidget):void
            {
                _bWidget = value;
            }
            
            public function set csvName(value:String):void
            {
                _csvName = value;
            }
            
            public function set csvSeperator(value:String):void
            {
                _csvSep = value;
            }
            
            public function set textQualifier(value:String):void
            {
                _textQualifier = value;
            }
            
            public function set layerDetails(value:*):void
            {
                _layerDetails = value;
            }
            
            public function set featLayer(value:FeatureLayer):void
            {
                _featLayer = value;
            }
            
            public function set csvExportOptionLbl(value:String):void
            {
                _exp2csvBtnLbl = value;
            }
            
            public function set txtExportOptionLbl(value:String):void
            {
                _exp2txtBtnLbl = value;
            }
            
            public function set ExportButtonLbl(value:String):void
            {
                _exportButtonLbl = value;
            }
            
            public function set RelateToolTip(value:String):void
            {
                _relateTooltip = value;
            }
            
            public function set RelateIcon(value:String):void
            {
                _relateIcon = value;
            }
            
            public function set footerIncludeDate(value:Boolean):void
            {
                _footerIncludeDate = value;
            }
            
            public function set footerDateFormat(value:String):void
            {
                _footerDateFormat = value;
            }
            
            public function set footerPageofPage(value:String):void
            {
                _footerPageofPage = value;
            }
            
            public function set footerDisclaimer(value:String):void
            {
                _footerDisclaimer = value;
            }
            
            public function set dgColumns(value:Array):void
            {
                gFieldsAc = new ArrayCollection;
                resultsGrid.columns = null;
                sortAC = new ArrayCollection();
                sumFormat = "";
                sortDetails = "";
                _dgColumns = value;
                var args:Array;
                var dgCol:GridColumn;
                var jdgCol:joinDataGridColumn;
                var dgColArr:ArrayList = new ArrayList();
                var fldObj:Object;
                
                dgCol = new GridColumn("caret");
                dgCol.width = 10;
                dgCol.headerText = "";
                dgColArr.addItem(dgCol);
                fldObj = new Object();
                fldObj.order = 0;
                fldObj.field = dgCol.dataField;
                gFieldsAc.addItem(fldObj);
                
                if(_hasRelates){
                    dgCol = new GridColumn();
                    dgCol.dataField = "icon";
                    dgCol.width = 65;
                    dgCol.dataTipField = _relateIcon;
                    dgCol.showDataTips = false;
                    dgCol.headerText = "Relate(s)";
                    dgCol.labelFunction = getFileName;
                    dgCol.itemRenderer = new ClassFactory(widgets.eSearch.HyperLinkIconColumn);
                    dgColArr.addItem(dgCol);
                    fldObj = new Object();
                    fldObj.order = 1;
                    fldObj.field = dgCol.dataField;
                    gFieldsAc.addItem(fldObj);
                }
                
                for(var i:int=0; i < _dgColumns.length; i++)
                {
                    var cArr:Array = _dgColumns[i].split("~");
                    fldObj = new Object();
                    fldObj.order = cArr[7] + 1;
                    if(cArr[0].indexOf( "." ) != -1){
                        jdgCol= new joinDataGridColumn(cArr[0]);
                        jdgCol.labelFunction = getLabel;
                        if (cArr[2] != "NA"){
                            jdgCol.labelFunction = getDateLbl;
                            _dateFormat = cArr[2];
                        }
                        if (cArr[3] != "NA"){
                            jdgCol.labelFunction = getCurrLbl;
                            _currFormat = cArr[3];
                            if(cArr[0] == _sumField){
                                sumFormat = "cur";
                            }
                        }
                        if (cArr[4] != "NA"){
                            jdgCol.labelFunction = getNumLbl;
                            _numFormat = cArr[4];
                            if(cArr[0] == _sumField){
                                sumFormat = "num";
                            }
                        }
                        if (cArr[5] != "NA"){
                            if(cArr[5] =="true"){
                                useUTC = true;
                            }else{
                                useUTC = false;
                            }
                        }
                        if (cArr[6] != "NA"){
                            sortDetails = cArr[6];
                            args = sortDetails.split("|");
                            jdgCol.sortDescending = (args[0] == "asc")?false:true;
                            if(args[2] == "date"){jdgCol.sortCompareFunction = date_sortCompareFunc};
                            sortAC.addItem({data: jdgCol,index: parseInt(args[1])});
                        }
                        if (_dgFieldAliases){
                            jdgCol.headerText = _dgFieldAliases[cArr[0]];
                        }
                        if (cArr[1] != "NA" && cArr[6] != null){
                            jdgCol.headerText = cArr[1];
                        }
                        HeaderText[cArr[0]] = jdgCol.headerText;
                        dgColArr.addItem(jdgCol);
                        fldObj.field = jdgCol.dataField;
                        gFieldsAc.addItem(fldObj);
                    }else{
                        dgCol= new GridColumn(cArr[0]);
                        dgCol.labelFunction = getLabel;
                        if (cArr[2] != "NA"){
                            dgCol.labelFunction = getDateLbl;
                            _dateFormat = cArr[2];
                        }
                        if (cArr[3] != "NA"){
                            dgCol.labelFunction = getCurrLbl;
                            _currFormat = cArr[3];
                            if(cArr[0] == _sumField){
                                sumFormat = "cur";
                            }
                        }
                        if (cArr[4] != "NA"){
                            dgCol.labelFunction = getNumLbl;
                            _numFormat = cArr[4];
                            if(cArr[0] == _sumField){
                                sumFormat = "num";
                            }
                        }
                        if (cArr[5] != "NA"){
                            if(cArr[5] =="true"){
                                useUTC = true;
                            }else{
                                useUTC = false;
                            }
                        }
                        if (cArr[6] != "NA" && cArr[6] != null){
                            sortDetails = cArr[6];
                            args = sortDetails.split("|");
                            dgCol.sortDescending = (args[0] == "asc")?false:true;
                            if(args[2] == "date"){dgCol.sortCompareFunction = date_sortCompareFunc};
                            sortAC.addItem({data: dgCol,index: parseInt(args[1])});
                        }
                        if (_dgFieldAliases){
                            dgCol.headerText = _dgFieldAliases[cArr[0]];
                        }
                        if (cArr[1] != "NA"){
                            dgCol.headerText = cArr[1];
                        }
                        HeaderText[cArr[0]] = dgCol.headerText;
                        dgColArr.addItem(dgCol);
                        fldObj.field = dgCol.dataField;
                        gFieldsAc.addItem(fldObj);
                    }
                }
                fldObj = new Object();
                fldObj.order = 9999;
                dgCol = new GridColumn("oid");
                dgCol.visible = false;
                dgColArr.addItem(dgCol);
                fldObj.field = dgCol.dataField;
                gFieldsAc.addItem(fldObj);
                resultsGrid.columns = dgColArr;
                sortGridFldCols();
            }
            
            public function set dgFieldAliases(value:Object):void
            {
                _dgFieldAliases = value;
            }
            
            private function exportTo(event:Event):void
            {
                try{
                    var data:String;
                    var defaultFileName:String;
                    if(optiongroup.selectedValue == _exp2csvBtnLbl){
                        data = exportCSV(resultsGrid,_csvSep,"\n",columnIndexes);
                        defaultFileName = _csvName + ".csv";
                    }else{
                        data = exportTXT(resultsGrid,"\n",columnIndexes);
                        defaultFileName = _csvName + ".txt";
                    }
                    
                    var fileReference:FileReference = new FileReference();
                     fileReference.save(data,defaultFileName);
                 }
                 catch(error:Error)
                {
                    Alert.show(error.message);
                }
            }
            
            private function msToDate(ms:Number, dateFormat:String, useUTC:Boolean):String
            {
                var date:Date = new Date(ms);
                if (date.milliseconds == 999){ // workaround for REST bug
                    date.milliseconds++;
                }
                if (useUTC){
                    date.minutes += date.timezoneOffset;
                }
                if (dateFormat){
                    dateFormatter.dateTimePattern = dateFormat;
                    var result:String = dateFormatter.format(date);
                    if (result){
                        return result;
                    }else{
                        return dateFormatter.errorText;
                    }
                }else{
                    return date.toLocaleString();
                }
            }
            
            private function exportCSV(dataGrid:DataGrid, csvSeparator:String=",", lineSeparator:String="\n", sortVector:Vector.<int>=null):String
            {
                try{
                    var data:String = "";
                    var columnArray:ArrayList = dataGrid.columns as ArrayList;
                    var columnCount:int = columnArray.length;
                    var dataGridColumn:GridColumn;
                    var header:String = "";
                    var headerGenerated:Boolean = false;
                    var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
                    
                    //Set the sorting
                    var sortFields:Array = [];
                    var dpSort:Sort = new Sort();
                    for (var v:int = 0; v < sortVector.length; v++){
                        dataGridColumn = columnArray.getItemAt(sortVector[v]) as GridColumn;
                        sortFields.push(dataGridColumn.sortField);
                    }
                    dpSort.fields = sortFields;
                    dataProvider.sort = dpSort;
                    dataProvider.refresh();
                    
                    var rowCount:int = dataProvider.length;
                    var dp:Object = null;
                    var cursor:IViewCursor = dataProvider.createCursor();
                    var j:int = 0;
                    
                    //loop through rows
                    while (!cursor.afterLast){
                        var object:Object = null;
                        object = cursor.current;
                        //loop through all columns for the row
                        for(var i:int = 0; i < columnCount; i++){
                            dataGridColumn = columnArray.getItemAt(i) as GridColumn;
                            //Exclude column data which is invisible (hidden)
                            if(!dataGridColumn.visible){
                                continue;
                            }
                            if(dataGridColumn.dataField == "icon" || dataGridColumn.dataField == "caret"){
                                continue;
                            }
                            if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
                                if(object[dataGridColumn.dataField] != null){
                                    data += _textQualifier + object[dataGridColumn.dataField] + _textQualifier;
                                }else{
                                    data += _textQualifier + _textQualifier;
                                }
                            }else{
                                if(dataGridColumn.itemToLabel(object) != null){
                                    data += _textQualifier + dataGridColumn.itemToLabel(object)+ _textQualifier;
                                }else{
                                    data += _textQualifier + _textQualifier;
                                }
                            }
                            if(i < (columnCount -1)){
                                data += csvSeparator;
                            }
                            
                            //generate header of CSV, only if it's not genereted yet
                            if (!headerGenerated){
                                header += _textQualifier + dataGridColumn.headerText + _textQualifier;
                                if (i < columnCount - 1){
                                    header += csvSeparator;
                                }
                            }
                        }
                        headerGenerated = true;
                        if (j < (rowCount - 1)){
                            data += lineSeparator;
                        }
                        j++;
                        cursor.moveNext();
                    }
                    //set references to null:
                    dataProvider = null;
                    columnArray = null;
                    dataGridColumn = null;        
                }
                catch(error:Error){
                    return null;
                    Alert.show(error.message);
                }
                return (header + lineSeparator + data);
            }
            
            private function exportTXT(dataGrid:DataGrid, lineSeparator:String="\n", sortVector:Vector.<int>=null):String
            {
                try{
                    var data:String = "";
                    var columnArray:ArrayList = dataGrid.columns as ArrayList;
                    var columnCount:int = columnArray.length;
                    var dataGridColumn:GridColumn;
                    var header:String = "";
                    var headerGenerated:Boolean = false;
                    var dataProvider:ArrayCollection = ObjectUtil.copy(dataGrid.dataProvider) as ArrayCollection;
                    
                    //Set the sorting
                    var sortFields:Array = [];
                    var dpSort:Sort = new Sort();
                    for (var v:int = 0; v < sortVector.length; v++){
                        dataGridColumn = columnArray.getItemAt(sortVector[v]) as GridColumn;
                        sortFields.push(dataGridColumn.sortField);
                    }
                    dpSort.fields = sortFields;
                    dataProvider.sort = dpSort;
                    dataProvider.refresh();
                    
                    var rowCount:int = dataProvider.length;
                    var dp:Object = null;
                    var cursor:IViewCursor = dataProvider.createCursor();
                    var j:int = 0;
                    
                    //loop through rows
                    while (!cursor.afterLast){
                        var object:Object = null;
                        object = cursor.current;
                        //loop through all columns for the row
                        for(var i:int = 0; i < columnCount; i++){
                            dataGridColumn = columnArray.getItemAt(i) as GridColumn;
                            //Exclude column data which is invisible (hidden)
                            if(!dataGridColumn.visible){
                                continue;
                            }
                            if(dataGridColumn.dataField == "icon" || dataGridColumn.dataField == "caret"){
                                continue;
                            }
                            if((dataGridColumn.itemRenderer == HyperLinkColumn)||(dataGridColumn.itemRenderer == HyperLinkIconColumn)){
                                if(object[dataGridColumn.dataField] != null){
                                    data += _textQualifier + object[dataGridColumn.dataField] + _textQualifier;
                                }else{
                                    data += _textQualifier + _textQualifier;
                                }
                            }else{
                                if(dataGridColumn.itemToLabel(object) != null){
                                    data += _textQualifier + dataGridColumn.itemToLabel(object)+ _textQualifier;
                                }else{
                                    data += _textQualifier + _textQualifier;
                                }
                            }
                            if(i < (columnCount -1)){
                                data += "\t";
                            }
                            //generate header of CSV, only if it's not genereted yet
                            if (!headerGenerated){
                                header += _textQualifier + dataGridColumn.headerText + _textQualifier;
                                if (i < columnCount - 1){
                                    header += "\t";
                                }
                            }
                        }
                        headerGenerated = true;
                        if (j < (rowCount - 1)){
                            data += lineSeparator;
                        }
                        j++;
                        cursor.moveNext ();
                    }
                    //set references to null:
                    dataProvider = null;
                    columnArray = null;
                    dataGridColumn = null;        
                }
                
                catch(error:Error)
                {
                    return null;
                    Alert.show(error.message);
                }
                return (header + lineSeparator + data);
            }
            
            // this is going to be executed when ever the data provider changes:
            [Bindable("dataChange")]
            private function calcMaxLengths(input:Array):Array {
                var sumofWidths:Number = 0;
                // if there are items in the DP:
                if ( input.length > 0 ) {
                    var maxLengths:Object = {};
                    // temp variables:
                    var key:String = "";
                    var i:int=0;
                    var h:int=0;
                    var dp:Object = input;
                    // for each item in the DP:
                    for ( i=0; i<dp.length; i++ ) {
                        var o:Object = dp[i];
                        // for each key in the DP row:
                        for ( key in o ) {
                            // if the output doesn't have current key yet create it and set to 0:
                            if ( !maxLengths.hasOwnProperty(key) ) {
                                maxLengths[key] = 0;
                            }
                            // check if it's simple object (may cause unexpected issues for Boolean):
                            if ( ObjectUtil.isSimple(o[key]) ) {
                                // measure the text (the actual label of the column):
                                var cellMetrics:TextLineMetrics = 
                                    (getGridColumnIndexByName(key, resultsGrid) != -1) ?
                                    FlexGlobals.topLevelApplication.measureText(GridColumn(resultsGrid.columns.getItemAt(getGridColumnIndexByName(key, resultsGrid))).itemToLabel(o)+"W") :
                                    FlexGlobals.topLevelApplication.measureText(o[key]+"W");
                                // and if the width is greater than longest found up to now:
                                if ( cellMetrics.width > maxLengths[key] ) {
                                    // set it as the longest one:
                                    maxLengths[key] = cellMetrics.width;
                                }
                            }
                        }
                    }
                    
                    // apply column sizes:
                    for ( key in maxLengths ) {
                        for ( i=0; i<resultsGrid.columnsLength; i++ ) {
                            // if the column actually exists:
                            if ((resultsGrid.columns.getItemAt(i) as GridColumn).dataField == key ) {
                                var cellMetrics2:TextLineMetrics = FlexGlobals.topLevelApplication.measureText((resultsGrid.columns.getItemAt(i) as GridColumn).headerText + "W");
                                if ( cellMetrics2.width + 18 > Number(maxLengths[key]) + 12 ) {
                                    (resultsGrid.columns.getItemAt(i) as GridColumn).width = cellMetrics2.width + 18;
                                } else {
                                    (resultsGrid.columns.getItemAt(i) as GridColumn).width = Number(maxLengths[key]) + 12;
                                }
                                if (GridColumn(resultsGrid.columns.getItemAt(i)).visible){
                                    sumofWidths += GridColumn(resultsGrid.columns.getItemAt(i)).width;
                                }
                            }
                        }
                    }
                    //Now check if a hyperlink field has an alias and set the field width based on that alias or the header text
                    for each (var obj:Object in hypercols){
                        for ( i=0; i<resultsGrid.columnsLength; i++ ) {
                            if ( (resultsGrid.columns.getItemAt(i) as GridColumn).dataField.toUpperCase() == obj.field.toUpperCase()) {
                                if(obj.alias != "NA"){
                                    cellMetrics2 = FlexGlobals.topLevelApplication.measureText((resultsGrid.columns.getItemAt(i) as GridColumn).headerText + "W");
                                    var cellMetrics3:TextLineMetrics = FlexGlobals.topLevelApplication.measureText(obj.alias + "W");
                                    if(cellMetrics3.width + 18 < cellMetrics2.width + 18){
                                        if(GridColumn(resultsGrid.columns.getItemAt(i)).width < cellMetrics2.width + 18){
                                            (resultsGrid.columns.getItemAt(i) as GridColumn).width = cellMetrics2.width + 18;
                                        }
                                    }else{
                                        if(GridColumn(resultsGrid.columns.getItemAt(i)).width < cellMetrics3.width + 18){
                                            (resultsGrid.columns.getItemAt(i) as GridColumn).width = cellMetrics3.width + 18;
                                        }
                                    }
                                    if (GridColumn(resultsGrid.columns.getItemAt(i)).visible){
                                        sumofWidths += GridColumn(resultsGrid.columns.getItemAt(i)).width;
                                    }
                                }
                            }
                        }
                    } 
                }
                
                //If data does not fill the datagrid then make the last visible column consume the remaining width of the datagrid
                if (resultsGrid.width >  sumofWidths) {
                    (resultsGrid.columns.getItemAt(resultsGrid.columnsLength - 2) as GridColumn).width = NaN;
                }
                
                // return an input:
                return input;
            }
            
            protected function getGridColumnIndexByName(FldName:String, dg:DataGrid):int
            {
                for each(var dgc:GridColumn in (dg.columns as ArrayList).source){
                    if(dgc.dataField == FldName){
                        return dgc.columnIndex;
                    }
                }
                return -1;
            }
            
            private function getGridColumn(key:String):GridColumn
            {
                var i:int;
                var retCol:GridColumn;
                for ( i=0; i<resultsGrid.columnsLength; i++ ) {
                    // if the column actually exists:
                    if ( GridColumn(resultsGrid.columns.getItemAt(i)).dataField == key ) {
                        retCol = GridColumn(resultsGrid.columns.getItemAt(i));
                        break;
                    }
                }
                return retCol;
            }
            
            private function getLabel(item:Object,column:GridColumn):String
            {
                return item[column.dataField];
            }
            
            private function getDateLbl(item:Object,column:GridColumn):String
            {
                var dateMS:Number = Number(item[column.dataField]);
                var retVal:String = "";
                var rVal:String = item[column.dataField];
                if(rVal == null){
                    //do nothing
                }else{
                    if (!isNaN(dateMS)){
                        //Fix the date format to use the Spark format
                        _dateFormat = _dateFormat.replace(/D/g, "d").replace(/Y/g, "y");
                        retVal = msToDate(dateMS, _dateFormat, useUTC);
                    }
                }
                return retVal;
            }
            
            private function getNumLbl(item:Object,column:GridColumn):String
            {
                var args:Array = _numFormat.split("|");
                if(args[0]){
                    numFormatter.fractionalDigits = args[0];
                }
                if(args[1]){
                    numFormatter.groupingSeparator = args[1];
                    numFormatter.useGrouping = true;
                }else{
                    numFormatter.useGrouping = false;
                }
                if(args[2]){
                    numFormatter.decimalSeparator = args[2];
                }
                return numFormatter.format(item[column.dataField]);
            }
            
            private function getCurrLbl(item:Object,column:GridColumn):String
            {
                var args:Array = _currFormat.split("|");
                if(args[0]){
                    currFormatter.currencySymbol = args[0];
                    currFormatter.useCurrencySymbol = true;
                }
                if(args[1]){
                    currFormatter.fractionalDigits = args[1];
                }
                if(args[2]){
                    currFormatter.groupingSeparator = args[2];
                    currFormatter.useGrouping = true;
                }else{
                    currFormatter.useGrouping = false;
                }
                if(args[3]){
                    currFormatter.decimalSeparator = args[3];
                }
                return currFormatter.format(item[column.dataField]);
            }
            
            private function labelFunc2(item:Object, column:GridColumn):String
            {
                return item[column.dataField];
            }
            
            private function labelFunc(item:Object, column:GridColumn):String
            {
                var retVal:String = "Get Hyperlink";
                for each (var obj:Object in hypercols){
                    if(obj.field.toUpperCase() == column.dataField.toUpperCase()){
                        if(obj.alias != "NA"){
                            //handle if the alias is a field and not a string
                            //and if the field has been concatenated with a prefix and or suffix then get the original instead
                            var sub:String = StringUtil.substitute(obj.alias, item);
                            var hyperAttribCache:String = (sub)?HyperAttribsCache[sub]:null;
                            if (!hyperAttribCache){
                                retVal = (sub)?sub:obj.alias;
                            }else{
                                retVal = (hyperAttribCache)?hyperAttribCache:obj.alias;
                            }
                        }
                    }
                }
                if (item[column.dataField] == "" || item[column.dataField] == " " || 
                    item[column.dataField] == "null" || item[column.dataField] == "unavailable"){
                    retVal = "";
                }
                return retVal;
            }
            
            private function sortGridFldCols():void
            {
                var isrt:Sort = new Sort();
                isrt.fields = [new SortField("order",false,true)];
                gFieldsAc.sort = isrt;
                gFieldsAc.refresh();
                var uSortedFlds:ArrayList = resultsGrid.columns as ArrayList;
                var sortArr:ArrayList = new ArrayList;
                for(var s:int = 0; s < gFieldsAc.length; s++){
                    for(var g:int = 0; g< uSortedFlds.length; g++){
                        if((uSortedFlds.getItemAt(g) as GridColumn).dataField == gFieldsAc[s].field){
                            sortArr.addItem(uSortedFlds.getItemAt(g));
                            break;
                        }
                    }
                }
                resultsGrid.columns = sortArr;
            }
            
            public function set dgHyperColumns(value:Array):void
            {
                var dgColItemRend:ClassFactory = new ClassFactory(HyperLinkColumn);
                var fldObj:Object;
                _dgHyperColumns = value;
                var dgCol:GridColumn;
                var dgColArr:ArrayList = resultsGrid.columns as ArrayList;
                hypercols = new ArrayCollection();
                for(var i:int=0; i < _dgHyperColumns.length; i++){
                    var cArr:Array = _dgHyperColumns[i].split("~");
                    fldObj = new Object();
                    fldObj.order = cArr[6];
                    hypercols.addItem({field: cArr[0], name: cArr[1], alias: cArr[2], pre: cArr[3], suf: cArr[4], icon: cArr[5]});
                    dgCol= new GridColumn(cArr[0]);
                    dgCol.itemRenderer = dgColItemRend;
                    dgCol.labelFunction = labelFunc2;
                    if (cArr[2] != "NA"){
                        dgCol.labelFunction = labelFunc;
                    }
                    if (_dgFieldAliases){
                        dgCol.headerText = _dgFieldAliases[cArr[0]];
                    }
                    if (cArr[1] != "NA"){
                        dgCol.headerText = cArr[1];
                    }
                    if (cArr[5] != "NA"){
                        dgCol.dataTipField = cArr[5];
                        dgCol.showDataTips = false;
                        dgCol.itemRenderer = new ClassFactory(HyperLinkIconColumn);
                    }else{
                        dgCol.itemRenderer = dgColItemRend;
                    }
                    dgColArr.addItem(dgCol);
                    fldObj.field = dgCol.dataField;
                    gFieldsAc.addItem(fldObj);
                }
                resultsGrid.columns = dgColArr;
                sortGridFldCols();
            }
            
            public function set zoomScale(value:Number):void
            {
                _zoomScale = value;
            }
            
            public function set zoomPercent(value:Number):void
            {
                _zoomPercent = value;
            }
            
            private var HyperAttribsCache:Dictionary;
            public function set dProvider(value:Object):void
            {
                HyperAttribsCache = new Dictionary();
                _data = ObjectUtil.copy(value) as Array;
                for each(var attributes:Object in _data){
                    for(var i:int=0; i<hypercols.length; i++){
                        //concatenate if
                        if(String(attributes[hypercols[i].field]) != "" 
                            && String(attributes[hypercols[i].field]) != " " 
                            && String(attributes[hypercols[i].field]) != null 
                            && String(attributes[hypercols[i].field]) != "unavailable"){
                            var pre:String = (hypercols[i].pre == "NA") ? "" : String(hypercols[i].pre);
                            var suf:String = (hypercols[i].suf == "NA") ? "" : String(hypercols[i].suf);
                            HyperAttribsCache[String(pre + String(attributes[hypercols[i].field]) + suf)] = attributes[hypercols[i].field];
                            attributes[hypercols[i].field] = String(pre + String(attributes[hypercols[i].field]) + suf);
                        }
                    }
                    if(_hasRelates){
                        attributes["icon"] = "defined";
                    }
                    if(_layerDetails){
                        var fld:Object;
                        var cVal:CodedValue;
                        var cDomain:CodedValueDomain;
                        var typeID:String = null;
                        if (_layerDetails.typeIdField){
                            typeID = _layerDetails.typeIdField ? attributes[_layerDetails.typeIdField] : null;
                        }
                        for each (fld in _layerDetails.fields){                            
                            if (_layerDetails.typeIdField && fld.name.toUpperCase() == _layerDetails.typeIdField.toUpperCase()){
                                // replace value with feature type name
                                var featureType:FeatureType = getFeatureType(typeID, _layerDetails);
                                if (featureType && featureType.name){
                                    attributes[fld.name] = featureType.name;
                                }
                            }else{
                                // replace value with coded value name if one exists
                                if (typeID){
                                    //revert to the actual field value and not the subtype name
                                    var ntypeID:String = getIdfromTypeName(typeID, _layerDetails);
                                    if (ntypeID){
                                        typeID = ntypeID;
                                    }
                                    var fType:FeatureType = getFeatureType(typeID, _layerDetails);
                                    if (fType){
                                        cDomain = fType.domains[fld.name] as CodedValueDomain;
                                    }
                                }else if(fld.domain){
                                    cDomain = fld.domain as CodedValueDomain;
                                }else{
                                    cDomain = null;
                                }
                                if (cDomain){
                                    for each (var codedValue:CodedValue in cDomain.codedValues){
                                        if (attributes[fld.name] == codedValue.code){
                                            attributes[fld.name] = codedValue.name;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    } 
                }
                resultsGrid.dataProvider = new ArrayCollection(calcMaxLengths(_data));
                var reset:Vector.<int> = Vector.<int>([]);
                resultsGrid.columnHeaderGroup.visibleSortIndicatorIndices = reset;
                
                //title += " selected records: " + resultsGrid.dataProvider.length.toString();
                if(_sumField){
                    try{
                        var total:Number = 0;
                        for each (var row:Object in resultsGrid.dataProvider) {
                            total += Number(row[_sumField]);
                        }
                        if(sumFormat == "num"){
                            var args:Array = _numFormat.split("|");
                            if(args[0]){
                                numFormatter.fractionalDigits = args[0];
                            }
                            if(args[1]){
                                numFormatter.groupingSeparator = args[1];
                                numFormatter.useGrouping = true;
                            }else{
                                numFormatter.useGrouping = false;
                            }
                            if(args[2]){
                                numFormatter.decimalSeparator = args[2];
                            }
                            taSum.text = numFormatter.format(total);
                        }else if(sumFormat == "cur"){
                            var args2:Array = _currFormat.split("|");
                            if(args[0]){
                                currFormatter.currencySymbol = args[0];
                                currFormatter.useCurrencySymbol = true;
                            }
                            if(args[1]){
                                currFormatter.fractionalDigits = args[1];
                            }
                            if(args[2]){
                                currFormatter.groupingSeparator = args[2];
                                currFormatter.useGrouping = true;
                            }else{
                                currFormatter.useGrouping = false;
                            }
                            if(args[3]){
                                currFormatter.decimalSeparator = args[3];
                            }
                            taSum.text = currFormatter.format(total);
                        }else{
                            taSum.text = total.toString();
                        }
                    }
                    catch (error:Error)
                    {
                        sumVisible = false;
                    }
                }
                
                var isrt:Sort = new Sort();
                isrt.fields = [new SortField("index",false,true)];
                sortAC.sort = isrt;
                sortAC.refresh();
                var sortArr:Array = [];
                for(var s:int = 0; s < sortAC.length; s++){
                    sortArr.push(resultsGrid.columns.getItemIndex(sortAC[s].data));
                }
                
                columnIndexes = Vector.<int>(sortArr);
                resultsGrid.sortByColumns(columnIndexes, true);
            }
            
            private function date_sortCompareFunc(itemA:Object, itemB:Object, column:GridColumn = null):int
            {
                var dateA:Date = new Date(itemA[column.dataField]);
                var dateB:Date = new Date(itemB[column.dataField]);
                return ObjectUtil.dateCompare(dateA, dateB);
            }
            
            private function getIdfromTypeName(typeName:String, vDtls:*):String
            {
                var result:String = null;
                var featureType:FeatureType;
                if (vDtls is LayerDetails){
                    for each (featureType in vDtls.types){
                        if (typeName == featureType.name){
                            result = featureType.id;
                            break;
                        }
                    }
                }
                
                if (vDtls is TableDetails){
                    for each (featureType in vDtls.types){
                        if (typeName == featureType.name){
                            result = featureType.id;
                            break;
                        }
                    }
                }
                
                return result;
            }
            
            private function getFeatureType(typeID:String, vDtls:*):FeatureType
            {
                var result:FeatureType;
                var featureType:FeatureType;
                
                if (vDtls is LayerDetails){
                    for each (featureType in vDtls.types){
                        if (typeID == featureType.id){
                            result = featureType;
                            break;
                        }
                    }
                }
                
                if (vDtls is TableDetails){
                    for each (featureType in vDtls.types){
                        if (typeID == featureType.id){
                            result = featureType;
                            break;
                        }
                    }
                }
                
                return result;
            }
            
            private function init():void
            {
                resultsGrid.moduleFactory = null;
                _resultsGrid = resultsGrid;
            }
            
            public function get datagrid():DataGrid
            {
                return _resultsGrid;
            }
            
            private function closeMe():void
            {
                PopUpManager.removePopUp(this);
            }
            
            private function onItemRollOver(event:GridEvent):void
            {
                clearTimeout(hitimer);
                if(_widgetInteract  && _bWidget){
                    if(!event.itemRenderer || !event.itemRenderer.data){
                        return;
                    }
                    _bWidget.highlightDataGroupItemByOID(event.itemRenderer.data.oid);
                    var searchResult:Object = findSearchResultByOID(event.itemRenderer.data.oid);
                    if(_popupsdiabled == false){
                        if(searchResult.graphic && searchResult.point){
                            if (map.extent.containsXY(searchResult.point.x, searchResult.point.y)){
                                hitimer = setTimeout(showInfoWindow, 300, searchResult);
                            }else{
                                hideInfoWindow();
                            }
                        }
                    }
                }
            }
            
            private function onItemRollOut(event:GridEvent):void
            {
                clearTimeout(hitimer);
                if(_widgetInteract && _bWidget){
                    _bWidget.unhighlightDataGroupItems();
                }
            }
            
            private function hideInfoWindow():void
            {
                if (map.infoWindow.contentOwner &&
                        ((map.infoWindow.contentOwner is Graphic && 
                        Graphic(map.infoWindow.contentOwner).parent === _qFeatLyr) ||
                        map.infoWindow.contentOwner is Map)){
                    map.infoWindow.hide();
                }
            }
            
            private function showInfoWindow(infoData:Object):void
            {
                var showHighlightPoint:MapPoint = infoData.point as MapPoint;
                popUpRenderer.popUpInfo = configurePopUpInfo(infoData.links);
                popUpRenderer.graphic = infoData.graphic;
                map.infoWindow.content = popUpRenderer;
                map.infoWindow.contentOwner = popUpRenderer.graphic;
                map.infoWindow.show(showHighlightPoint);
            }
            
            private function configurePopUpInfo(links:Array):PopUpInfo
            {
                var popUpInfo:PopUpInfo = new PopUpInfo;
                popUpInfo.title = "{title__pu__sr}";
                popUpInfo.description = "{content__pu__sr}";
                popUpInfo.showAttachments = true;
                var pminfos:Array = [];
                
                for(var l:int=0; l<links.length; l++){
                    if (links[l].link){
                        var pos:Number = links[l].link.length - 4;
                        var sfx:String = String(links[l].link).substr(pos, 4).toLowerCase();
                        if ((sfx == ".jpg") || (sfx == ".png") || (sfx == ".gif")){ // use PopUpMediaInfo if it is an image
                            var popUpMediaInfo:PopUpMediaInfo = new PopUpMediaInfo;
                            popUpMediaInfo.type = PopUpMediaInfo.IMAGE;
                            popUpMediaInfo.imageLinkURL = links[l].link;
                            popUpMediaInfo.imageSourceURL = links[l].link;
                            pminfos.push(popUpMediaInfo);
                        }else{
                            var lText:String = (links[l].alias != "") ? links[l].alias : links[l].link;
                            popUpInfo.description += "<br /><a href='" + links[l].link + "'>" + lText + "</a>"
                        }
                    }
                }
                popUpInfo.popUpMediaInfos = pminfos;
                return popUpInfo;
            }
            
            private function highLightSel(event:Event):void
            {
                clearTimeout(hitimer);
                if(resultsGrid.selectedItem && _bWidget){
                    _bWidget.highlightDataGroupItemByOID(resultsGrid.selectedItem.oid);
                }
            }
            
            private function unhighLightSel(event:Event):void
            {
                if(resultsGrid.selectedItem && _bWidget){
                    _bWidget.unhighlightDataGroupItems();
                }
            }
            
            private function findSearchResultByOID(oid:Number):SearchResult
            {
                var retSR:SearchResult;    
                for (var i:Number = 0; i < _bWidget.searchResultAC.length; i++){
                    var sr:SearchResult = _bWidget.searchResultAC[i];
                    if(sr.oid == oid){
                        retSR = sr;
                        break;
                    }
                }
                return retSR;
            }
            
            private function clickRow(event:GridEvent):void
            {
                if(!event.itemRenderer || !event.itemRenderer.data){
                    return;
                }
                var searchResult:SearchResult = findSearchResultByOID(event.itemRenderer.data.oid);
                if(!searchResult.graphic){
                    if(event.itemRenderer is HyperLinkIconColumn){
                        _bWidget.standaloneRelate(event.itemRenderer.data.oid);
                    }
                    return;
                }
                if(event.itemRenderer is HyperLinkIconColumn){
                    var hlic:HyperLinkIconColumn = event.itemRenderer as HyperLinkIconColumn;
                    if(hlic.data[hlic.getDataField()] == "defined"){
                        _bWidget.clickSearchRelateResult(searchResult);
                    }
                    return;
                }
                if(resultsGrid.selectedItems && resultsGrid.selectedItems.length > 1)
                {
                    zoom2allSelected();
                    return;
                }
                var pt:MapPoint = searchResult.point;
                var map:Map = ViewerContainer.getInstance().mapManager.map;
                if (searchResult.graphic.geometry){
                    if (searchResult.graphic.geometry.type == Geometry.MAPPOINT){
                        if(isNaN(_zoomScale)){
                            map.zoom(1 / 16, searchResult.point);
                            map.centerAt(searchResult.point);
                        }else{
                            if (map.scale > _zoomScale){
                                map.scale = _zoomScale;
                            }
                            map.centerAt(searchResult.point);
                        }
                    }else{
                        if(isNaN(_zoomScale)){
                            map.zoomTo(searchResult.graphic.geometry.extent.expand(_zoomPercent));
                        }else{
                            if (map.scale > _zoomScale){
                                map.scale = _zoomScale;
                            }
                            map.centerAt(searchResult.point);
                        }
                    }
                    if(_popupsdiabled == false){
                        callLater(showInfoWindow, [searchResult]);
                    }
                }
            }
            
            private function zoom2allSelected():void
            {
                var graArr:Array = [];
                var s:int;   
                var len:Number = resultsGrid.selectedItems.length;
                for (s = 0; s < len; s++)
                {
                    var searchResult:* = findSearchResultByOID(resultsGrid.selectedItems[s].oid);
                    var gra:Graphic = searchResult.graphic;
                    if (gra.geometry){
                        graArr.push(gra);
                    }
                }
                if (graArr.length < 1){
                    return;
                }
                var graphicsExtent:Extent = GraphicUtil.getGraphicsExtent(validateSelectedGeom(graArr));
                if(graphicsExtent){
                    if(isNaN(_zoomPercent)){
                        _zoomPercent = 1.2;
                    }
                    map.zoomTo(graphicsExtent.expand(_zoomPercent));
                }else{
                    var mp2:MapPoint = graArr[0].geometry as MapPoint;
                    map.zoom(1 / 16, mp2);
                    map.centerAt(mp2);
                }
            }
            
            private function validateSelectedGeom(FeatsArr:Array):Array
            {
                var gra:Graphic;
                var retFeatArr:Array = [];
                for(var i:int=0; i<FeatsArr.length; i++){
                    gra = FeatsArr[i];
                    if(gra.geometry){
                        retFeatArr.push(gra);
                    }
                }
                return retFeatArr;
            }
            
            private function getFileName(o:Object, c:GridColumn):String
            {
                return _relateTooltip;
            }
            
            protected function dataGridResizeHandler(event:Event):void
            {
                if(resultsGrid.columnsLength > 0){
                    (resultsGrid.columns.getItemAt(resultsGrid.columnsLength - 2) as GridColumn).width = NaN;
                }
            }
            
            protected function PrintDDGBtn_clickHandler(event:MouseEvent):void
            {
                var printProps:PrintProperties = new PrintProperties();
                printProps.dataGrid = resultsGrid;
                printProps.title = _title;
                printProps.sortCols = columnIndexes;
                printProps.headerBGColor = _headerBGColor;
                printProps.repeatHeader = _repeatHeader;
                printProps.headerFontColor = _headerFontColor;
                printProps.dateformat = _footerDateFormat;
                printProps.pageofpage = _footerPageofPage;
                printProps.disclaimer = _footerDisclaimer;
                printProps.includedate = _footerIncludeDate;
                PrintUtil.printDataGrid(printProps, this.stage, getUserAgent());
            }
            
            private static function getUserAgent():String
            {
                var userAgent:String;
                try
                {
                    userAgent = ExternalInterface.call("window.navigator.userAgent.toString");
                    var browser:String = "[Unknown Browser]";
                    
                    if (userAgent.indexOf("Safari") != -1)
                    {
                        browser = "Safari";
                    }
                    if (userAgent.indexOf("Firefox") != -1)
                    {
                        browser = "Firefox";
                    }
                    if (userAgent.indexOf("Chrome") != -1)
                    {
                        browser = "Chrome";
                    }
                    if (userAgent.indexOf("MSIE") != -1)
                    {
                        browser = "Internet Explorer";
                    }
                    if (userAgent.indexOf("Opera") != -1)
                    {
                        browser = "Opera";
                    }
                }
                catch (e:Error)
                {
                    //could not access ExternalInterface in containing page
                    return "[No ExternalInterface]";
                }
                return browser;
            }
            
            protected function resultsGrid_selectionChangeHandler(event:GridSelectionEvent):void
            {
                var selItems:Vector.<Object> = resultsGrid.selectedItems;
                _bWidget.subSelectItemByOID(selItems);
                resultsGrid.invalidateDisplayList();
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <s:RadioButtonGroup id="optiongroup"/>
    </fx:Declarations>
    <s:DataGrid id="resultsGrid"
                height="100%" width="100%" 
                caretColor="{this.getStyle('focusColor')}"
                resize="dataGridResizeHandler(event)"
                updateComplete="dataGridResizeHandler(event)"
                gridClick="clickRow(event)"
                gridRollOver="onItemRollOver(event)"
                gridRollOut="onItemRollOut(event)"
                rollOut="highLightSel(event)"
                rollOver="unhighLightSel(event)"
                horizontalScrollPolicy="auto"
                contentBackgroundAlpha="1"
                selectionMode="multipleRows"
                selectionChange="resultsGrid_selectionChangeHandler(event)"
                skinClass="widgets.eSearch.skins.DataGridSkin"/>
    <Search:controlBarContent>
        <s:HGroup verticalAlign="middle" paddingLeft="4" >
            <s:Label id="lblSum" text="{_labelSum}" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
            <s:TextArea id="taSum" heightInLines="1" editable="false" borderVisible="false" visible="{sumVisible}" includeInLayout="{sumVisible}"/>
            <s:RadioButton label="{_exp2csvBtnLbl}" groupName="optiongroup" selected="true" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
            <s:RadioButton label="{_exp2txtBtnLbl}" groupName="optiongroup" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
            <s:Button id="Export" height="24" label="{_exportButtonLbl}" click="exportTo(event)" skinClass="widgets.eSearch.skins.ExportButtonSkin" visible="{_enableExport}" includeInLayout="{_enableExport}"/>
            <s:Button id="PrintDDGBtn" height="24" label="{_labelPrint}" click="PrintDDGBtn_clickHandler(event)" skinClass="widgets.eSearch.skins.PrintButtonSkin" visible="{_enablePrint}" includeInLayout="{_enablePrint}"/>
        </s:HGroup>
    </Search:controlBarContent>
    <Search:controlBarLayout>
        <s:HorizontalLayout horizontalAlign="right" paddingTop="3" paddingBottom="2" paddingRight="5" clipAndEnableScrolling="true" />
    </Search:controlBarLayout>
</Search:ResizeTitleWindow>