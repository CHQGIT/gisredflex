<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"				   
				   xmlns:components="com.esri.viewer.components.*"
				   xmlns:esri="http://www.esri.com/2008/ags"  
				   initialize="basewidget1_initializeHandler(event)" 
				   creationComplete="basewidget1_creationCompleteHandler(event)"
				   >	
	
	<viewer:states>
		<s:State name="bkmInit"/>
		<s:State name="bkmConsulta"/>
		
	</viewer:states>
	<viewer:transitions>
		<s:Transition autoReverse="true" toState="*">
			<s:Fade targets="{[bkmInit,bkmConsulta]}"/>
		</s:Transition>
	</viewer:transitions>
	
	<fx:Declarations>
		<s:GlowFilter id="glowFilter"
					  alpha="1"
					  color="{getStyle('focusColor')}"
					  inner="true"
					  strength="2"/>
		
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="dd/MM/yyyy"/>
		
		<esri:SimpleMarkerSymbol id="smsIdentify"
								 alpha="0.5"
								 color="0xFF9900"
								 size="20"
								 style="circle"/>
		
		<mx:WipeUp id="myWU" duration="300"/>
		<mx:WipeDown id="myWD" duration="500"/>
		<mx:WipeRight id="myWR" duration="850"/>
		<esri:GraphicsLayer id="graphicsLayer" />
		
		<esri:Map id="map">
			<esri:infoWindowContent>
				<s:TextArea id="myTextArea"
							width="250" height="75"/>
			</esri:infoWindowContent>
			
			<esri:FeatureLayer 
				id="lecturasLayer"
				outFields="*"
				mode="onDemand"	
				graphicAdd="verElemento(event)"
				url="http://gisred.chilquinta/arcgis/rest/services/Varios/Ingreso_Lectores/FeatureServer/0"
				>
			</esri:FeatureLayer>
			
		</esri:Map>
		
		
		<esri:SimpleFillSymbol id="mouseOverSymbol" alpha="0.5">
			<esri:SimpleLineSymbol width="0" color="0xFF0000"/>
		</esri:SimpleFillSymbol>
		<esri:SimpleFillSymbol id="defaultsym" alpha="0.2">
			<esri:SimpleLineSymbol width="1" color="0xEEEEEE"/>
		</esri:SimpleFillSymbol>
		
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.events.GraphicEvent;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.ToolTipEvent;
			import mx.messaging.messages.ErrorMessage;
			import mx.rpc.AsyncResponder;
			import mx.utils.StringUtil;
			
			import comun.Planificacion.User;
			import comun.url.URL;
			
			import widgets.AdminLectores.utilidad.urls;
			private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
			
			
			[Bindable] public var idPosteNuevo:String;
			[Bindable] public var idDirNueva:String;
			[Bindable] public var rotNuevo:String;
			[Bindable] public var dirNueva:String;
			
			[Bindable] public var coleccionClientes:ArrayCollection = new ArrayCollection;
			[Bindable] public var coleccionEstados:ArrayCollection = new ArrayCollection;
			
			
			[Bindable] public var fs:FeatureSet = new FeatureSet;
			[Bindable] public var rotu:int;
			[Bindable] public var rotuloEncontrado:String;
			[Bindable] public var direccionCompleta:String;
			[Bindable] public var nisBuscado:String;
			[Bindable] public var anexo1:String;
			[Bindable] public var anexo2:String;
			[Bindable] public var tipoEdificacion:String;
			public var myGraphicsLayer:GraphicsLayer =  new GraphicsLayer;
			
			private var ColeccionUser:ArrayCollection = new ArrayCollection;
			private var text1:String;
			
			import org.example.components.PanelToolTip;
			protected var ptt:PanelToolTip = new PanelToolTip();
			
			//public var lecturasLayer:ArcGISDynamicMapServiceLayer= new ArcGISDynamicMapServiceLayer(widgets.AdminLectores.utilidad.urls.URL_LECTURAS_DYN);
			
			protected function basewidget1_initializeHandler(event:FlexEvent):void{
				ConsultarAcceso();
				//DataClientesNuevos.selectedIndex = 1;
			}
			
			public function openLayer():void{
				lecturasLayer.name = "Ingreso Lectores";
				map.addLayer(lecturasLayer);				
				lecturasLayer.visible = true;	
			}
			
			protected function verElemento(event:GraphicEvent):void
			{
				var graphic:Graphic = event.graphic;				
				graphic.toolTip = " ";
				graphic.addEventListener(ToolTipEvent.TOOL_TIP_CREATE, stateToolTipCreateHandler, false, 0, true);		
			}
			
			//Crea Tooltip al objeto grafico			
			protected function stateToolTipCreateHandler(event:ToolTipEvent):void
			{
				var graphic:Graphic = event.currentTarget as Graphic;
				ptt.title = "ID: " + graphic.attributes.OBJECTID;
				ptt.Poste = graphic.attributes.POSTE;
				ptt.Medidor = graphic.attributes.nro_medidor;
				ptt.Revision = graphic.attributes.estado_revision ;
				ptt.Final = graphic.attributes.estado_final ;
				
				
				/*ptt.TipoConexion = graphic.attributes.TIPO_CONEXION;
				ptt.Potencia = graphic.attributes.POTENCIA;
				ptt.Tipo = graphic.attributes.TIPO;
				ptt.Propiedad = graphic.attributes.PROPIEDAD;
				ptt.Medido = graphic.attributes.MEDIDO;
				*/
				event.toolTip = ptt;
			}
			
			protected function ConsultarAcceso():void{
				
				var queryTaskUserSelected:QueryTask = new QueryTask();
				queryTaskUserSelected.url = comun.url.URL.URL_ACCESO;
				queryTaskUserSelected.useAMF = false;
				var queryEquipoSelected:Query = new Query();
				queryEquipoSelected.outFields = ["*"];
				queryEquipoSelected.returnGeometry = true;     
				queryEquipoSelected.orderByFields = ["usuario"];
				queryEquipoSelected.where = "usuario = '" + User.Usuario + "' AND MODULO ='INGRESO_CLIENTES' AND widget='ADMINLECTURAS'" ;
				queryEquipoSelected.spatialRelationship ="esriSpatialRelIntersects";
				queryEquipoSelected.outSpatialReference = map.spatialReference;
				queryTaskUserSelected.execute(queryEquipoSelected, new AsyncResponder(onResult, onFault));
				
				function onResult(featureSet:FeatureSet, token:Object = null):void{
					
					if(featureSet.features.length == 0 ){
						//Alert.show("No tiene permisos para accesder a este modulo\n Comuniquese con el administrador de GISRED")
						//currentState = "bkmInit"; 
						currentState ="bkmInit";
						lblwarning.visible = true;
						lblwarning2.visible = true;
						pbGisred.visible = true;
						wTemplate.height = 500;
						wTemplate.width = 800;
					}
						//si hay, cuales son los permisos
					else{   
						
						ColeccionUser.addAll(new ArrayCollection(featureSet.attributes));
						
						for(var i:int=0;i<=ColeccionUser.length-1;i++){	
							
							if(ColeccionUser[i].select_ == 'FALSE'){
								btnExportarDatosClientes.enabled = false;
							}else{
								btnExportarDatosClientes.enabled = true;
							}
							
							if( ColeccionUser[i].update_ == 'FALSE'){
								DDLEstadoCliente.enabled = false;
								btnCambiarEstadoCliente.enabled = false;
								
								
							}else{
								DDLEstadoCliente.enabled = true;
								btnCambiarEstadoCliente.enabled = true;
								
							}
							
						}
						
						
						cargarListaClientesNuevos();
						txtFilterClientes.addEventListener(Event.CHANGE,filterGridClientes);
						
						currentState ="bkmConsulta";
						wTemplate.height = 500;
						wTemplate.width = 800;
						
					}
				}
				
				
				
				function onFault(info:Object, token:Object = null):void
				{   
					Alert.show("No tiene permisos para accesder a este modulo\n Comuniquese con el administrador");
					currentState ="bkmInit";
					lblwarning.visible = true;
					lblwarning2.visible = true;
					pbGisred.visible = true;
					wTemplate.width = 800;
					wTemplate.height = 500;
				}
			}
			
			
			//Filtra Listado de Solicitudes ingresadas en Textbox
			protected function filterGridClientes(event:Event):void
			{
				/* To get this function to work, only edit variables filterText, columnArray, gridDataProvider, and dataGridName. 
				Everything else is dynamic. Do not edit variable names. */
				var filterText:String = StringUtil.trim(txtFilterClientes.text.toLowerCase()); //Trimmed text String to filter by
				var columnArray:Array = ['OBJECTID','nro_medidor','estado','tipo_edificacion','poste','direccion','estado_revision','lector','lectura_actual','created_user', 'created_date', 'estado_final']; //Datagrid column names to filter on
				var gridDataProvider:ArrayCollection = this.coleccionClientes as ArrayCollection; //Name of datagrid's dataprovider. In this case e.g. databases
				var dataGridName:String = 'DataClientesNuevos'; //Name of the datagrid you are filtering by
				
				//Do not edit code past this point
				var filteredData:Array = [];
				var added:Boolean=false;
				var i:int;
				var j:int;
				
				// Loop Through Grid
				for(i=0; i < gridDataProvider.length; i++){    
					added = false;
					
					//Loop through grid column
					for(j=0; j<columnArray.length; j++){            
						if(gridDataProvider[i][columnArray[j]]!=null){
							
							//Grab datagrid cell contents, trim it, and convert to lowercase for comparison.
							var filterString:String = gridDataProvider[i][columnArray[j]].toString().toLowerCase();
							
							//Compare the datagrid string(filterString) to the user typed string(filterText).  
							if(!added){      
								//If the datagrid string matches the users string, put it into the array.
								if(filterString.indexOf(filterText) != -1){
									filteredData.push(gridDataProvider[i]);
									added = true;
								} 
							}else{
								//Do nothing, break out.
								break;
							}
						}    
					}
				}
				
				//Set datagrid dataprovider
				if(filterText.length == 0){
					this[dataGridName].dataProvider = gridDataProvider; //Display the original unfiltered data
				}else{
					this[dataGridName].dataProvider = filteredData; //Pusht he filtered data into the datagrid
				}
			}	
			public function cargarListaClientesNuevosRango():void {
				// TODO Auto-generated method stub
				coleccionClientes.removeAll();
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_LECTURAS);
				var query:Query = new Query();
				query.where = "created_date >=" + "'" +  dateDesde.text + "'" + "and created_date <=" + "'" + dateHasta.text + "'  AND (estado_final IS NULL OR estado_final <>'CARGADO')"; 
				
				query.outFields = ['*'];
				query.orderByFields = ['created_date'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void
				{
					var k:int;
					
					
					for(k=0;k<featureSet.features.length;k++)
					{
						
						
						var recordGraphic:Graphic = featureSet.features[k];
						coleccionClientes.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
							nro_medidor:recordGraphic.attributes["nro_medidor"],
							estado:recordGraphic.attributes["estado"],
							tipo_edificacion:recordGraphic.attributes["tipo_edificacion"],
							poste:recordGraphic.attributes["poste"],
							direccion:recordGraphic.attributes["direccion"],
							estado_revision:recordGraphic.attributes["estado_revision"],
							lector:recordGraphic.attributes["lector"],
							created_user:recordGraphic.attributes["created_user"],
							created_date:dateFormatter.format(new Date(recordGraphic.attributes["created_date"])),
							estado_final:recordGraphic.attributes["estado_final"],
							lectura_actual: recordGraphic.attributes["lectura_actual"],
							gra:recordGraphic});			
					}
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","Carga de Lecturas");
				}
			}
			
			
			
			public function cargarListaClientesNuevos():void {
				// TODO Auto-generated method stub
				coleccionClientes.removeAll();
				DataClientesNuevos.dataProvider = coleccionClientes;
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_LECTURAS);
				var query:Query = new Query();
				query.where = "estado_final  IS NULL OR estado_final  <> 'CARGADO'";
				query.outFields = ['*'];
				query.orderByFields = ['created_date'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				
				
				function onResultQuery(featureSet:FeatureSet, token:Object = null):void{
					var k:int;
					
					
					for(k=0;k<featureSet.features.length;k++)
					{
						
						//Evelyn Hernández - 14.6.2017 - Arreglando problema con valores nulos.
						var recordGraphic:Graphic = featureSet.features[k];
						coleccionClientes.addItem({OBJECTID:recordGraphic.attributes["OBJECTID"], 
							nro_medidor:recordGraphic.attributes["nro_medidor"],
							estado:recordGraphic.attributes["estado"],
							tipo_edificacion:recordGraphic.attributes["tipo_edificacion"],
							poste:recordGraphic.attributes["poste"],
							direccion:recordGraphic.attributes["direccion"],
							estado_revision:recordGraphic.attributes["estado_revision"],
							lector:recordGraphic.attributes["lector"],
							created_user:recordGraphic.attributes["created_user"],
							created_date:dateFormatter.format(new Date(recordGraphic.attributes["created_date"])),
							estado_final:recordGraphic.attributes["estado_final"],
							lectura_actual: recordGraphic.attributes["lectura_actual"],
							gra:recordGraphic});			
					}
					
					
				}
				function onFaultQuery(info:Object, token:Object = null):void
				{   
					Alert.show("Error en consulta","Carga de Lecturas");
				}
			}
			
			
			protected function basewidget1_creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				DataClientesNuevos.dataProvider = coleccionClientes;
			}
			
			public var myGraphic:Graphic;
			
			public var acPolyline:ArrayCollection = new ArrayCollection;
			
			public function DataClientesNuevos_itemClickHandler(event:ListEvent):void
			{
				anexo1="";
				anexo2="";
				tipoEdificacion="";
				//buscar datos de detalle
				//buscarDetalle(DataClientesNuevos.selectedItem['NIS'], DataClientesNuevos.selectedItem['OBJECTID']);
				
				// TODO Auto-generated method stub
				var queryTask:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_LECTURAS);
				
				var query:Query = new Query();
				
				//7.6.2017: Evelyn Hernández - Arreglando problema de búsqueda de nis con más de una geometría. 
				
				query.where = "OBJECTID="+ DataClientesNuevos.selectedItem['OBJECTID'] + "and nro_medidor=" + DataClientesNuevos.selectedItem['nro_medidor'];
				query.outFields = ['*'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery2, onFaultQuery2));
				
				function onResultQuery2(featureSet2:FeatureSet, token:Object = null):void {
					//Alert.show("Elementos " + featureSet2.features.length + " a:" + featureSet2.features[0].attributes['OBJECTID'] + featureSet2.features[0].attributes['SHAPE']  );
					
					//Evelyn Hernández - 14.6.2017 - Arreglada lógica para nis sin geometría ni atributos específicos. 
					
					if(!featureSet2.features.length){
						Alert.show("No hay lecturas para mostrar.");
						return;	
					}else{
						if(!featureSet2.features[0].geometry){
							myGraphicsLayer.clear();
							Alert.show("Lectura sin geometría para mostrar");
							
						}else{
							myGraphicsLayer.clear();
							map.level = 20;
							var mp:MapPoint=featureSet2.features[0].geometry as MapPoint;
							
							var g:Graphic = new Graphic(mp,smsIdentify);
							
							
							myGraphicsLayer.add(g);
							map.addLayer(myGraphicsLayer);
							map.zoomTo(featureSet2.features[0].geometry);
							
							/*var popupRenderer:ClassFactory = new ClassFactory(PopUpRenderer);
							
							
							// Create the pop-up field infos for each field you want in the pop-up
							field1 = new PopUpFieldInfo();
							//field1.fieldName = 'nro_medidor';
							field1.label = "Número Medidor: "+ featureSet2.features[0].attributes[""];
							field1.visible = true;
							
							field2 = new PopUpFieldInfo();
							field2.fieldName = "estado";
							field2.format = new PopUpFieldFormat();
							field2.label = "Estado: ";
							field2.visible = true;
							
							field3 = new PopUpFieldInfo();
							field3.fieldName = "tipo_edificacion";
							field3.format = new PopUpFieldFormat();
							field3.label = "Tipo Edificación: ";
							field3.visible = true;
							
							field4 = new PopUpFieldInfo();
							field4.fieldName = "ARCGIS.dbo.CLIENTES_DATA_DATOS_006.categoria";
							field4.format = new PopUpFieldFormat();
							field4.label = "Categoria: ";
							field4.visible = true;
							
							field5 = new PopUpFieldInfo();
							field5.fieldName = "poste";
							field5.format = new PopUpFieldFormat();
							field5.label = "Poste: ";
							field5.visible = true;
							
							field6 = new PopUpFieldInfo();
							field6.fieldName = "direccion";
							field6.format = new PopUpFieldFormat();
							field6.label = "Dirección: ";
							field6.visible = true;
							
							field7 = new PopUpFieldInfo();
							field7.fieldName = "estado_revision";
							field7.format = new PopUpFieldFormat();
							field7.label = "Estado Revisión: ";
							field7.visible = true;
							
							field8 = new PopUpFieldInfo();
							field8.fieldName = "created_user";
							field8.format = new PopUpFieldFormat();
							field8.label = "Creado por: ";
							field8.visible = true;
							
							field9 = new PopUpFieldInfo();
							field9.fieldName = "created_date";
							field9.format = new PopUpFieldFormat();
							field9.label = "Fecha creación: ";
							field9.visible = true;
							
							field10 = new PopUpFieldInfo();
							field10.fieldName = "lectura_actual";
							field10.format = new PopUpFieldFormat();
							field10.label = "Lectura actual: ";
							field10.visible = true;
							
							field11 = new PopUpFieldInfo();
							field11.fieldName = "lector";
							field11.format = new PopUpFieldFormat();
							field11.label = "Lector: ";
							field11.visible = true;
							
							field12 = new PopUpFieldInfo();
							field12.fieldName = "estado_final";
							field12.format = new PopUpFieldFormat();
							field12.label = "Estado final: ";
							field12.visible = true;
							var popUpInfo:PopUpInfo = new PopUpInfo();
							popUpInfo.popUpFieldInfos = [ field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12];
							popUpInfo.title = "Medidor: " + DataClientesNuevos.selectedItem['nro_medidor'];
							popUpInfo.showZoomToButton = true;
							
							//	Configuración ventana infoWindow con graphic
							popupRenderer.properties = { "popUpInfo": popUpInfo };
							popUpRenderer.popUpInfo = popUpInfo;
							popUpRenderer.graphic = g;
							map.infoWindow.content = popUpRenderer;
							map.infoWindow.contentOwner = popUpRenderer.graphic;
							map.infoWindow.show(mp);
							
							
							
							map.infoWindow.show(mp);
							*/
						}
						
					}
					
				}
				function onFaultQuery2(info:Object, token:Object = null):void{   
					Alert.show("Error al buscar lectura, intente nuevamente");
				}
			}
			
			public function buscarDetalle(nis:int, objid: int):void{
				
				nisBuscado = String(nis);
				
				var queryTask:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_LECTURAS);
				var query:Query = new Query();
				query.where = "nro_medidor="+ nis + "and OBJECTID="+objid;
				query.outFields = ['*'];
				query.returnGeometry = true;
				queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
				
				function onResultQuery(featureSet2:FeatureSet, token:Object = null):void {
					//Evelyn Hernández - 14.6.2017  - Cambiada lógica de detalle de nis.
					if(!featureSet2.features.length){
						Alert.show("No hay detalle para la lectura");
						direccionCompleta = "";
						rotuloEncontrado = "";
					}else{
						//buscarDireccion(featureSet2.features[0].attributes['ID_DIRECCION']);
						//buscarRotulo(featureSet2.features[0].attributes['ID_POSTE_CAMARA']);
					}
					
				}
				function onFaultQuery(info:Object, token:Object = null):void{   
					Alert.show("Hubo un problema buscando el detalle de la lectura, intente nuevamente.");
				}
			}
			
			/*public function buscarDireccion(idDir:int):void {
			var queryTask2:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_DIRECCIONES);
			var query2:Query = new Query();
			query2.where = "id_direccion="+ idDir;
			query2.outFields = ['*'];
			query2.returnGeometry = false;
			queryTask2.execute(query2, new AsyncResponder(onResultQuery3, onFaultQuery3));
			
			function onResultQuery3(featureSet3:FeatureSet, token:Object = null):void {
			
			if (featureSet3.attributes.length>0){
			direccionCompleta = featureSet3.features[0].attributes['nombre_calle'] + " "+ featureSet3.features[0].attributes['numero'] + " - Según SW"  ;
			}else{
			buscarEnExternosDir(idDir);
			}
			}
			function onFaultQuery3(info:Object, token:Object = null):void{   
			Alert.show("Hubo problemas buscando la dirección (antigua) del nis, intente nuevamente");
			}
			}
			
			public function buscarEnExternosDir(idD:int):void{
			
			var queryTask2:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_CREAR_DIRECCION);
			var query2:Query = new Query();
			query2.where = "OBJECTID="+ idD;
			query2.outFields = ['*'];
			query2.returnGeometry = false;
			queryTask2.execute(query2, new AsyncResponder(onResultQuery3, onFaultQuery3));
			
			function onResultQuery3(featureSet3:FeatureSet, token:Object = null):void {
			//Evelyn Hernández - 14.6.2017
			//Cambiando lógica de direcciones nuevas
			if(featureSet3.features.length){
			direccionCompleta = featureSet3.features[0].attributes['CALLE'] + " " + featureSet3.features[0].attributes['NUMERO'] + " - Según TECNORED" ;
			tipoEdificacion = featureSet3.features[0].attributes['TIPO_EDIFICACION'];
			
			if (featureSet3.features[0].attributes['ANEXO1']=="") {
			anexo1 = ""; 
			
			if(featureSet3.features[0].attributes['ANEXO2']==""){
			anexo2 = ""; 
			}
			
			
			}else{
			anexo1 = featureSet3.features[0].attributes['ANEXO1'] + " - Según TECNORED"; 
			if (featureSet3.features[0].attributes['ANEXO2']==""){
			anexo2 = ""; 
			}else {
			anexo2 =  featureSet3.features[0].attributes['ANEXO2'] + " - Según TECNORED"; 
			}
			
			}
			}else{
			direccionCompleta= "";
			tipoEdificacion = "";
			}
			
			}
			function onFaultQuery3(info:Object, token:Object = null):void{   
			Alert.show("Hubo un problema buscando la dirección (nueva) asociada al nis, intente nuevamente");
			}
			}
			
			public function buscarRotulo(ipc:int):void{
			var queryTask2:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_ROTULOS);
			var query2:Query = new Query();
			query2.where = "id_nodo="+ ipc;
			query2.outFields = ['rotulo'];
			query2.returnGeometry = false;
			queryTask2.execute(query2, new AsyncResponder(onResultQuery3, onFaultQuery3));
			
			function onResultQuery3(featureSet3:FeatureSet, token:Object = null):void {
			
			if (featureSet3.attributes.length>0){
			rotuloEncontrado = featureSet3.features[0].attributes['rotulo'] + "  - Según SW";
			}else{
			buscarEnExternos(ipc);
			}
			}
			function onFaultQuery3(info:Object, token:Object = null):void{   
			Alert.show("Hubo un problema buscando el rótulo (antiguo) del nis, intente nuevamente");
			
			}
			}
			
			public function buscarEnExternos(idpEx:int):void{
			var queryTask:QueryTask = new QueryTask(widgets.AdminLectores.utilidad.urls.URL_CREAR_POSTES);
			var query:Query = new Query();
			query.where = "OBJECTID="+ idpEx;
			query.outFields = ['*'];
			query.returnGeometry = true;
			queryTask.execute(query, new AsyncResponder(onResultQuery, onFaultQuery));
			
			function onResultQuery(featureSet2:FeatureSet, token:Object = null):void {
			if(!featureSet2.features.length){
			rotuloEncontrado = "";
			return;
			}
			rotuloEncontrado = featureSet2.features[0].attributes['ROTULO'] + " - Según TECNORED";
			}
			function onFaultQuery(info:Object, token:Object = null):void {   
			Alert.show("Hubo un problema buscando el rótulo (nuevo) del nis, intente nuevamente");
			}
			}
			*/
			private var ef:ExcelFile;
			private var ba:ByteArray;
			private var fr:FileReference;
			private var frSave:FileReference;
			protected function btnExportarDatosClientes_clickHandler(event:MouseEvent):void
			{
				
				// TODO Auto-generated method stub
				switch(event.currentTarget.id)
				{
					case "btnExportarDatosClientes":
					{
						
						var s:Sheet = new Sheet();
						s.resize(coleccionClientes.length+1,12);
						s.setCell(0,0,"ID");
						s.setCell(0,1,"NUMERO MEDIDOR");
						s.setCell(0,2,"ESTADO");
						s.setCell(0,3,"TIPO_EDIFICACION");
						s.setCell(0,4,"POSTE");
						s.setCell(0,5,"DIRECCION");
						s.setCell(0,6,"ESTADO_REVISION");
						s.setCell(0,7,"LECTOR");
						s.setCell(0,8,"CREADO_POR");
						s.setCell(0,9,"FECHA_CREACION");
						s.setCell(0,10,"ESTADO_FINAL");
						s.setCell(0,11,"LECTURA_ACTUAL");
						for(var j:int=0;j<coleccionClientes.length;j++)
						{
							s.setCell(j+1,0,coleccionClientes[j].OBJECTID);										
							s.setCell(j+1,1,coleccionClientes[j].nro_medidor);
							s.setCell(j+1,2,coleccionClientes[j].estado);
							s.setCell(j+1,3,coleccionClientes[j].tipo_edificacion);
							s.setCell(j+1,4,coleccionClientes[j].poste);
							s.setCell(j+1,5,coleccionClientes[j].direccion);
							s.setCell(j+1,6,coleccionClientes[j].estado_revision);
							s.setCell(j+1,7,coleccionClientes[j].lector);
							s.setCell(j+1,8,coleccionClientes[j].created_user);
							s.setCell(j+1,9,coleccionClientes[j].created_date);
							s.setCell(j+1,10,coleccionClientes[j].estado_final);
							s.setCell(j+1,11,coleccionClientes[j].lectura_actual);
						}
						
						try {
							var fileTosave:ExcelFile = new ExcelFile();
							fileTosave.sheets.addItem(s);
							
							var fileBytes:ByteArray = fileTosave.saveToByteArray();
							frSave = new FileReference();
							frSave.save(fileBytes,"ExportacionAdmLectores.xls");
							frSave.addEventListener(Event.COMPLETE,grabadoListo);
							
						}catch(e:ErrorMessage){
							Alert.show("Error al guardar archivo" + e);
							
						}
						
						break;
					}
						
						
					default:
					{
						//Alert.show("Ningun archivo ha sido generado");
						break;
					}
				}			
			}
			
			public function grabadoListo(event:Event):void{
				Alert.show("Listo");
			}
			
			protected function wTemplate_initializeHandler(event:FlexEvent):void
			{
				coleccionEstados.removeAll();
				coleccionEstados = new ArrayCollection(				
					[ {item:"REVISADO"},
						{item:""}]);
				
				
				DDLEstadoCliente.dataProvider = coleccionEstados;
			}
			
			protected function btnCambiarEstadoCliente_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (DataClientesNuevos.selectedIndex>=0){
					//Layer que se ocupa para las actividades
					var myActLayer:FeatureLayer = new FeatureLayer(urls.URL_LECTURAS);
					//cambiar estado
					var ModClientesNuevos:* = new Object;
					
					ModClientesNuevos["OBJECTID"]= DataClientesNuevos.selectedItem['OBJECTID'];
					//Alert.show(String(DDLEstadoCliente.selectedItem.item));
					ModClientesNuevos["estado_final"]= DDLEstadoCliente.selectedItem.item;
					
					
					var graficoEditadoActual:Graphic = new Graphic;
					
					graficoEditadoActual = new Graphic(null,null,ModClientesNuevos);
					
					myActLayer.applyEdits(null,[graficoEditadoActual],null, false,new AsyncResponder(onResult, onFault));
					
					
					function onResult():void
					{      
						Alert.show("Medidor: " + DataClientesNuevos.selectedItem['nro_medidor'] + " modificado" );
						cargarListaClientesNuevos();
						
					}
					
					function onFault(info:Object, token:Object = null):void
					{
						Alert.show("Error al modificar el medidor.  Contáctese con el administrador de GISRED. "+info.toString());
					}
					
					
				}else{
					Alert.show("Debe seleccionar un medidor de la tabla para cambiar su estado");
				}
			}
			
			protected function bkmInit_initializeHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				var verImageGISRED:Image = new Image;
				
				//imagen configuraciones
				verImageGISRED.scaleContent = true;
				verImageGISRED.maintainAspectRatio =false;
				verImageGISRED.percentWidth = 850;
				verImageGISRED.percentHeight = 500;
				verImageGISRED.source =  "assets/images/128x128.png";
				pbGisred.addChild(verImageGISRED);
				
			}
			protected function btnRangoFecha_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				cargarListaClientesNuevosRango();
			}
			private function dateChooser_init(dt:DateField):void {
				dt.text = "Desde";
				dt.dayNames=['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'];
				dt.monthNames=[	'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
					'Julio', 'Agosto', 'Septiembre', 'Octubre',
					'Noviembre', 'Diciembre'];
				dt.firstDayOfWeek = 1;
				dt.formatString = "DD/MM/YYYY";
			}
			private function dateChooser2_init(dt:DateField):void {
				dt.text = "Hasta";
				dt.dayNames=['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'];
				dt.monthNames=[	'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
					'Julio', 'Agosto', 'Septiembre', 'Octubre',
					'Noviembre', 'Diciembre'];
				dt.firstDayOfWeek = 1;
				dt.formatString = "DD/MM/YYYY";
			}
			
			protected function image1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				coleccionClientes.removeAll();
				cargarListaClientesNuevos();
				DataClientesNuevos.dataProvider = coleccionClientes;
			}
			
			protected function wTemplate_closedHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				// TODO Auto-generated method stub
				map.removeLayer(lecturasLayer);
			}
			
			protected function wTemplate_openHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				openLayer();
			}
			
		]]>
	</fx:Script>
	<viewer:WidgetTemplate id="wTemplate"                      
						   width="850" height="500"
						   visible="true" initialize="wTemplate_initializeHandler(event)" closed="wTemplate_closedHandler(event)" open="wTemplate_openHandler(event)">
		
		<s:Group id="bkmInit" width="100%" height="100%" initialize="bkmInit_initializeHandler(event)"
				 visible="false" visible.bkmInit="true">	
			<s:VGroup horizontalAlign="center" height="100%" width="100%" verticalAlign="middle">
				<mx:Canvas width="200" height="200" id="pbGisred" color="0x000000" horizontalScrollPolicy="off"
						   verticalScrollPolicy="off" visible="false"/>                                           
				<s:Label id="lblwarning" text="No tiene permisos para acceder a este módulo." 
						 fontSize="16" visible="false" paddingTop="10"/>
				<s:Label id="lblwarning2" text="Comuniquese con el administrador de GISRED" 
						 fontSize="16" visible="false" paddingTop="10"/>
			</s:VGroup>
		</s:Group> 
		
		<s:Group id="bkmConsulta"
				 width="100%" height="100%"
				 visible="false"
				 visible.bkmConsulta="true">
			
			
			
			<mx:Canvas id="ListadoClientes" label="Lista Lecturas" width="100%" height="100%">
				<s:VGroup width="100%" top="5" bottom="5" height="80%">
					<mx:Label id="Lblclie" text="Listado de Lecturas" fontSize="18"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<mx:TextInput x="10" id="txtFilterClientes" width="100%" height="30" fontSize="14" fontWeight="bold" />
						<mx:Image x="504" y="10" width="35" height="33"  source="assets/images/lupa_40x40.png"/>
						<mx:Image x="504" y="10" width="35" height="33"  source="assets/images/refresh_1.png" click="image1_clickHandler(event)"/>
					</s:HGroup>
					<mx:DataGrid id="DataClientesNuevos" resizableColumns="true" sortableColumns="true" editable="false"  
								 width="100%" height="100%" visible="true" selectable="true" itemClick="DataClientesNuevos_itemClickHandler(event)">
						<mx:columns>        
							<mx:DataGridColumn  dataField="OBJECTID" headerText="OBJECTID" width="30" visible="true"/>                                                         
							
							<mx:DataGridColumn dataField="nro_medidor" headerText="NUM.MEDIDOR" width="50" /> 
							<mx:DataGridColumn dataField="estado" headerText="ESTADO" visible="true" width="50" />
							<mx:DataGridColumn dataField="tipo_edificacion" headerText="EDIFICACION" width="50"/>
							<mx:DataGridColumn dataField="poste" headerText="POSTE" visible="true" width="50" />
							<mx:DataGridColumn dataField="direccion" headerText="DIRECCION" visible="true" width="50" />
							<mx:DataGridColumn dataField="lectura_actual" headerText="LECTURA_ACTUAL" visible="true" width="50" />
							<mx:DataGridColumn dataField="estado_revision" headerText="ESTADO_REVISION" visible="false" width="50" />
							<mx:DataGridColumn dataField="lector" headerText="LECTOR" visible="true" width="50" />
							<mx:DataGridColumn dataField="created_user" headerText="CREADO POR" visible="true" width="50" />
							<mx:DataGridColumn dataField="created_date" headerText="FECHA CREACION" visible="true" width="50" />
							<mx:DataGridColumn dataField="estado_final" headerText="ESTADO FINAL" visible="true" width="50" />
							
							
						</mx:columns>
					</mx:DataGrid> 
					
					<mx:HRule width="100%">
						
					</mx:HRule>
					<s:HGroup width="100%">
						<s:HGroup horizontalAlign="left" width="100%">
							<mx:DateField id="dateDesde" formatString="DD/MM/YYYY" creationComplete="dateChooser_init(dateDesde)"/>
							<mx:DateField id="dateHasta" formatString="DD/MM/YYYY" creationComplete="dateChooser2_init(dateHasta)"/>
							<s:Button id="btnRangoFecha" label="Consultar" click="btnRangoFecha_clickHandler(event)"/> 
						</s:HGroup>
						<s:HGroup horizontalAlign="right" width="100%">
							<s:DropDownList id="DDLEstadoCliente"  prompt="Seleccione Estado del Cliente" width="150" labelField="item" dataProvider="{coleccionEstados}"/>
							<s:Button id="btnCambiarEstadoCliente" label="Cambiar" click="btnCambiarEstadoCliente_clickHandler(event)"/>
							<s:Button id="btnExportarDatosClientes" label="Exportar Listado" click="btnExportarDatosClientes_clickHandler(event)"/>
						</s:HGroup>
					</s:HGroup>
					<mx:HRule width="100%">
						
					</mx:HRule>
					
					
				</s:VGroup>
				
				
			</mx:Canvas>
			
			
			
		</s:Group>
		
		
		
	</viewer:WidgetTemplate>
</viewer:BaseWidget>